
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.10.01 at 12:54:17 AM CEST 
//

package com.aalmo.yamaha.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import java.io.StringWriter;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

/**
 * <p>
 * Java class for anonymous complex type.
 * 
 * <p>
 * The following XML fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
  *	<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
 *	<YAMAHA_AV rsp="GET" RC="0" cmd="PUT">
 *	    <Main_Zone>
 *	        <Power_Control>
 *	            <Power>Standby</Power>
 *	            <Sleep>Off</Sleep>
 *	        </Power_Control>
 *	        <Volume>
 *	            <Lvl>
 *	                <Val>-520</Val>
 *	                <Exp>1</Exp>
 *	                <Unit>dB</Unit>
 *	            </Lvl>
 *	            <Mute>Off</Mute>
 *	        </Volume>
 *	        <Input>
 *	            <Input_Sel>HDMI1</Input_Sel>
 *	            <Input_Sel_Item_Info>
 *	                <Param>HDMI1</Param>
 *	                <RW>RW</RW>
 *	                <Title>  APPLE  </Title>
 *	                <Icon>
 *	                    <On>/YamahaRemoteControl/Icons/icon004.png</On>
 *	                    <Off></Off>
 *	                </Icon>
 *	                <Src_Name></Src_Name>
 *	                <Src_Number>1</Src_Number>
 *	            </Input_Sel_Item_Info>
 *	        </Input>
 *	        <Surround>
 *	            <Program_Sel>
 *	                <Current>
 *	                    <Straight>Off</Straight>
 *	                    <Enhancer>Off</Enhancer>
 *	                    <Sound_Program>5ch Stereo</Sound_Program>
 *	                </Current>
 *	            </Program_Sel>
 *	            <_3D_Cinema_DSP>Auto</_3D_Cinema_DSP>
 *	        </Surround>
 *	        <Sound_Video>
 *	            <Tone>
 *	                <Bass>
 *	                    <Val>60</Val>
 *	                    <Exp>1</Exp>
 *	                    <Unit>dB</Unit>
 *	                </Bass>
 *	                <Treble>
 *	                    <Val>55</Val>
 *	                    <Exp>1</Exp>
 *	                    <Unit>dB</Unit>
 *	                </Treble>
 *	            </Tone>
 *	            <Direct>
 *	                <Mode>Off</Mode>
 *	            </Direct>
 *	            <HDMI>
 *	                <Standby_Through_Info>On</Standby_Through_Info>
 *	                <Output>
 *	                    <OUT_1>On</OUT_1>
 *	                </Output>
 *	            </HDMI>
 *	            <Adaptive_DRC>Auto</Adaptive_DRC>
 *	        </Sound_Video>
 *	    </Main_Zone>
 *	</YAMAHA_AV>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = { "mainZone" })
@XmlRootElement(name = "YAMAHA_AV")
public class YAMAHAAV implements Cloneable, CopyTo, Equals, HashCode, ToString {

	@XmlElement(name = "Main_Zone", required = true)
	protected YAMAHAAV.MainZone mainZone;
	@XmlAttribute(name = "rsp")
	protected String rsp;
	@XmlAttribute(name = "RC")
	protected Byte rc;
	@XmlAttribute(name = "cmd")
	protected String cmd;

	/**
	 * Gets the value of the mainZone property.
	 * 
	 * @return possible object is {@link YAMAHAAV.MainZone }
	 * 
	 */
	public YAMAHAAV.MainZone getMainZone() {
		return mainZone;
	}

	/**
	 * Sets the value of the mainZone property.
	 * 
	 * @param value
	 *            allowed object is {@link YAMAHAAV.MainZone }
	 * 
	 */
	public void setMainZone(YAMAHAAV.MainZone value) {
		this.mainZone = value;
	}

	/**
	 * Gets the value of the rsp property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getRsp() {
		return rsp;
	}

	/**
	 * Sets the value of the rsp property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setRsp(String value) {
		this.rsp = value;
	}

	/**
	 * Gets the value of the rc property.
	 * 
	 * @return possible object is {@link Byte }
	 * 
	 */
	public Byte getRC() {
		return rc;
	}

	/**
	 * Sets the value of the rc property.
	 * 
	 * @param value
	 *            allowed object is {@link Byte }
	 * 
	 */
	public void setRC(Byte value) {
		this.rc = value;
	}

	/**
	 * Gets the value of the cmd property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getCmd() {
		return cmd;
	}

	/**
	 * Sets the value of the cmd property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setCmd(String value) {
		this.cmd = value;
	}

	/**
	 * Create an instance of {@link YAMAHAAV.MainZone }
	 * 
	 */
	public static YAMAHAAV createRoot() {
		YAMAHAAV yamahaav = new YAMAHAAV();
		yamahaav.setCmd(YAMAHACMD.XMLMeta.PUT);
		yamahaav.setMainZone(new MainZone());
		return yamahaav;
	}

	public String toString() {
		StringWriter sw = new StringWriter();
		JAXBContext jc;
		try {
			jc = JAXBContext.newInstance(this.getClass());
			Marshaller marshaller = jc.createMarshaller();
			marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
			marshaller.marshal(this, sw);
		} catch (JAXBException e) {
			e.printStackTrace();
		}
		return sw.toString();
	}

	public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
		strategy.appendStart(locator, this, buffer);
		appendFields(locator, buffer, strategy);
		strategy.appendEnd(locator, this, buffer);
		return buffer;
	}

	public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
		{
			YAMAHAAV.MainZone theMainZone;
			theMainZone = this.getMainZone();
			strategy.appendField(locator, this, "mainZone", buffer, theMainZone);
		}
		{
			String theRsp;
			theRsp = this.getRsp();
			strategy.appendField(locator, this, "rsp", buffer, theRsp);
		}
		{
			Byte theRC;
			theRC = this.getRC();
			strategy.appendField(locator, this, "rc", buffer, theRC);
		}
		{
			String theCmd;
			theCmd = this.getCmd();
			strategy.appendField(locator, this, "cmd", buffer, theCmd);
		}
		return buffer;
	}

	public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
			EqualsStrategy strategy) {
		if (!(object instanceof YAMAHAAV)) {
			return false;
		}
		if (this == object) {
			return true;
		}
		final YAMAHAAV that = ((YAMAHAAV) object);
		{
			YAMAHAAV.MainZone lhsMainZone;
			lhsMainZone = this.getMainZone();
			YAMAHAAV.MainZone rhsMainZone;
			rhsMainZone = that.getMainZone();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "mainZone", lhsMainZone),
					LocatorUtils.property(thatLocator, "mainZone", rhsMainZone), lhsMainZone, rhsMainZone)) {
				return false;
			}
		}
		{
			String lhsRsp;
			lhsRsp = this.getRsp();
			String rhsRsp;
			rhsRsp = that.getRsp();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "rsp", lhsRsp),
					LocatorUtils.property(thatLocator, "rsp", rhsRsp), lhsRsp, rhsRsp)) {
				return false;
			}
		}
		{
			Byte lhsRC;
			lhsRC = this.getRC();
			Byte rhsRC;
			rhsRC = that.getRC();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "rc", lhsRC),
					LocatorUtils.property(thatLocator, "rc", rhsRC), lhsRC, rhsRC)) {
				return false;
			}
		}
		{
			String lhsCmd;
			lhsCmd = this.getCmd();
			String rhsCmd;
			rhsCmd = that.getCmd();
			if (!strategy.equals(LocatorUtils.property(thisLocator, "cmd", lhsCmd),
					LocatorUtils.property(thatLocator, "cmd", rhsCmd), lhsCmd, rhsCmd)) {
				return false;
			}
		}
		return true;
	}

	public boolean equals(Object object) {
		final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
		return equals(null, null, object, strategy);
	}

	public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
		int currentHashCode = 1;
		{
			YAMAHAAV.MainZone theMainZone;
			theMainZone = this.getMainZone();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mainZone", theMainZone),
					currentHashCode, theMainZone);
		}
		{
			String theRsp;
			theRsp = this.getRsp();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rsp", theRsp), currentHashCode, theRsp);
		}
		{
			Byte theRC;
			theRC = this.getRC();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rc", theRC), currentHashCode, theRC);
		}
		{
			String theCmd;
			theCmd = this.getCmd();
			currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cmd", theCmd), currentHashCode, theCmd);
		}
		return currentHashCode;
	}

	public int hashCode() {
		final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
		return this.hashCode(null, strategy);
	}

	public Object clone() {
		return copyTo(createNewInstance());
	}

	public Object copyTo(Object target) {
		final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
		return copyTo(null, target, strategy);
	}

	public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
		final Object draftCopy = ((target == null) ? createNewInstance() : target);
		if (draftCopy instanceof YAMAHAAV) {
			final YAMAHAAV copy = ((YAMAHAAV) draftCopy);
			if (this.mainZone != null) {
				YAMAHAAV.MainZone sourceMainZone;
				sourceMainZone = this.getMainZone();
				YAMAHAAV.MainZone copyMainZone = ((YAMAHAAV.MainZone) strategy
						.copy(LocatorUtils.property(locator, "mainZone", sourceMainZone), sourceMainZone));
				copy.setMainZone(copyMainZone);
			} else {
				copy.mainZone = null;
			}
			if (this.rsp != null) {
				String sourceRsp;
				sourceRsp = this.getRsp();
				String copyRsp = ((String) strategy.copy(LocatorUtils.property(locator, "rsp", sourceRsp), sourceRsp));
				copy.setRsp(copyRsp);
			} else {
				copy.rsp = null;
			}
			if (this.rc != null) {
				Byte sourceRC;
				sourceRC = this.getRC();
				Byte copyRC = ((Byte) strategy.copy(LocatorUtils.property(locator, "rc", sourceRC), sourceRC));
				copy.setRC(copyRC);
			} else {
				copy.rc = null;
			}
			if (this.cmd != null) {
				String sourceCmd;
				sourceCmd = this.getCmd();
				String copyCmd = ((String) strategy.copy(LocatorUtils.property(locator, "cmd", sourceCmd), sourceCmd));
				copy.setCmd(copyCmd);
			} else {
				copy.cmd = null;
			}
		}
		return draftCopy;
	}

	public Object createNewInstance() {
		return new YAMAHAAV();
	}

	/**
	 * <p>
	 * Java class for anonymous complex type.
	 * 
	 * <p>
	 * The following schema fragment specifies the expected content contained
	 * within this class.
	 * 
	 * <pre>
	 *	<Main_Zone>
	 *	        <Power_Control>
	 *	            <Power>Standby</Power>
	 *	            <Sleep>Off</Sleep>
	 *	        </Power_Control>
	 *	        <Volume>
	 *	            <Lvl>
	 *	                <Val>-520</Val>
	 *	                <Exp>1</Exp>
	 *	                <Unit>dB</Unit>
	 *	            </Lvl>
	 *	            <Mute>Off</Mute>
	 *	        </Volume>
	 *	        <Input>
	 *	            <Input_Sel>HDMI1</Input_Sel>
	 *	            <Input_Sel_Item_Info>
	 *	                <Param>HDMI1</Param>
	 *	                <RW>RW</RW>
	 *	                <Title>  APPLE  </Title>
	 *	                <Icon>
	 *	                    <On>/YamahaRemoteControl/Icons/icon004.png</On>
	 *	                    <Off></Off>
	 *	                </Icon>
	 *	                <Src_Name></Src_Name>
	 *	                <Src_Number>1</Src_Number>
	 *	            </Input_Sel_Item_Info>
  	 *	        </Input>
 	 *	        <Surround>
	 *	            <Program_Sel>
	 *	                <Current>
 	 *	                    <Straight>Off</Straight>
	 *	                    <Enhancer>Off</Enhancer>
	 *	                    <Sound_Program>5ch Stereo</Sound_Program>
	 *	                </Current>
	 *	            </Program_Sel>
	 *	            <_3D_Cinema_DSP>Auto</_3D_Cinema_DSP>
	 *	        </Surround>
	 *	        <Sound_Video>
	 *	            <Tone>
	 *	                <Bass>
	 *	                    <Val>60</Val>
	 *	                    <Exp>1</Exp>
	 *	                    <Unit>dB</Unit>
	 *	                </Bass>
	 *	                <Treble>
	 *	                    <Val>55</Val>
	 *	                    <Exp>1</Exp>
	 *	                    <Unit>dB</Unit>
	 *	                </Treble>
	 *	            </Tone>
	 *	            <Direct>
	 *	                <Mode>Off</Mode>
	 *	            </Direct>
	 *	            <HDMI>
	 *	                <Standby_Through_Info>On</Standby_Through_Info>
	 *	                <Output>
	 *	                    <OUT_1>On</OUT_1>
	 *	                </Output>
	 *	            </HDMI>
	 *	            <Adaptive_DRC>Auto</Adaptive_DRC>
	 *	        </Sound_Video>
	 *	    </Main_Zone>
	 * </pre>
	 * 
	 * 
	 */
	@XmlAccessorType(XmlAccessType.FIELD)
	@XmlType(name = "", propOrder = { "basicStatus", "powerControl", "volume", "input", "surround", "soundVideo" })
	public static class MainZone implements Cloneable, CopyTo, Equals, HashCode, ToString {

		@XmlElement(name = "Basic_Status", required = true)
		protected String basicStatus;
		@XmlElement(name = "Power_Control", required = true)
		protected YAMAHAAV.MainZone.PowerControl powerControl;
		@XmlElement(name = "Volume", required = true)
		protected YAMAHAAV.MainZone.Volume volume;
		@XmlElement(name = "Input", required = true)
		protected YAMAHAAV.MainZone.Input input;
		@XmlElement(name = "Surround", required = true)
		protected YAMAHAAV.MainZone.Surround surround;
		@XmlElement(name = "Sound_Video", required = true)
		protected YAMAHAAV.MainZone.SoundVideo soundVideo;

		/**
		 * Gets the value of the basicStatus property.
		 * 
		 * @return possible object is {@link String }
		 * 
		 */
		protected String getBasicStatus() {
			return basicStatus;
		}

		/**
		 * Sets the value of the basicStatus property.
		 * 
		 * @param value
		 *            allowed object is {@link String }
		 * 
		 */
		public void setBasicStatus(String value) {
			this.basicStatus = value;
		}

		/**
		 * Gets the value of the powerControl property.
		 * 
		 * @return possible object is {@link YAMAHAAV.MainZone.PowerControl }
		 * 
		 */
		public YAMAHAAV.MainZone.PowerControl getPowerControl() {
			return powerControl;
		}

		/**
		 * Sets the value of the powerControl property.
		 * 
		 * @param value
		 *            allowed object is {@link YAMAHAAV.MainZone.PowerControl }
		 * 
		 */
		public void setPowerControl(YAMAHAAV.MainZone.PowerControl value) {
			this.powerControl = value;
		}

		/**
		 * Gets the value of the volume property.
		 * 
		 * @return possible object is {@link YAMAHAAV.MainZone.Volume }
		 * 
		 */
		public YAMAHAAV.MainZone.Volume getVolume() {
			return volume;
		}

		/**
		 * Sets the value of the volume property.
		 * 
		 * @param value
		 *            allowed object is {@link YAMAHAAV.MainZone.Volume }
		 * 
		 */
		public void setVolume(YAMAHAAV.MainZone.Volume value) {
			this.volume = value;
		}

		/**
		 * Gets the value of the input property.
		 * 
		 * @return possible object is {@link YAMAHAAV.MainZone.Input }
		 * 
		 */
		public YAMAHAAV.MainZone.Input getInput() {
			return input;
		}

		/**
		 * Sets the value of the input property.
		 * 
		 * @param value
		 *            allowed object is {@link YAMAHAAV.MainZone.Input }
		 * 
		 */
		public void setInput(YAMAHAAV.MainZone.Input value) {
			this.input = value;
		}

		/**
		 * Gets the value of the surround property.
		 * 
		 * @return possible object is {@link YAMAHAAV.MainZone.Surround }
		 * 
		 */
		public YAMAHAAV.MainZone.Surround getSurround() {
			return surround;
		}

		/**
		 * Sets the value of the surround property.
		 * 
		 * @param value
		 *            allowed object is {@link YAMAHAAV.MainZone.Surround }
		 * 
		 */
		public void setSurround(YAMAHAAV.MainZone.Surround value) {
			this.surround = value;
		}

		/**
		 * Gets the value of the soundVideo property.
		 * 
		 * @return possible object is {@link YAMAHAAV.MainZone.SoundVideo }
		 * 
		 */
		public YAMAHAAV.MainZone.SoundVideo getSoundVideo() {
			return soundVideo;
		}

		/**
		 * Sets the value of the soundVideo property.
		 * 
		 * @param value
		 *            allowed object is {@link YAMAHAAV.MainZone.SoundVideo }
		 * 
		 */
		public void setSoundVideo(YAMAHAAV.MainZone.SoundVideo value) {
			this.soundVideo = value;
		}

		public String toString() {
			YAMAHAAV yamahaav = YAMAHAAV.createRoot();
			yamahaav.getMainZone().setSoundVideo(this.getSoundVideo());
			StringWriter sw = new StringWriter();
			JAXBContext jc;
			try {
				jc = JAXBContext.newInstance(this.getClass());
				Marshaller marshaller = jc.createMarshaller();
				marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
				marshaller.marshal(yamahaav, sw);
			} catch (JAXBException e) {
				e.printStackTrace();
			}
			return sw.toString();
		}

		public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
			strategy.appendStart(locator, this, buffer);
			appendFields(locator, buffer, strategy);
			strategy.appendEnd(locator, this, buffer);
			return buffer;
		}

		public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
			{
				String theBasicStatus;
				theBasicStatus = this.getBasicStatus();
				strategy.appendField(locator, this, "basicStatus", buffer, theBasicStatus);
			}
			{
				YAMAHAAV.MainZone.PowerControl thePowerControl;
				thePowerControl = this.getPowerControl();
				strategy.appendField(locator, this, "powerControl", buffer, thePowerControl);
			}
			{
				YAMAHAAV.MainZone.Volume theVolume;
				theVolume = this.getVolume();
				strategy.appendField(locator, this, "volume", buffer, theVolume);
			}
			{
				YAMAHAAV.MainZone.Input theInput;
				theInput = this.getInput();
				strategy.appendField(locator, this, "input", buffer, theInput);
			}
			{
				YAMAHAAV.MainZone.Surround theSurround;
				theSurround = this.getSurround();
				strategy.appendField(locator, this, "surround", buffer, theSurround);
			}
			{
				YAMAHAAV.MainZone.SoundVideo theSoundVideo;
				theSoundVideo = this.getSoundVideo();
				strategy.appendField(locator, this, "soundVideo", buffer, theSoundVideo);
			}
			return buffer;
		}

		public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
				EqualsStrategy strategy) {
			if (!(object instanceof YAMAHAAV.MainZone)) {
				return false;
			}
			if (this == object) {
				return true;
			}
			final YAMAHAAV.MainZone that = ((YAMAHAAV.MainZone) object);
			{
				String lhsBasicStatus;
				lhsBasicStatus = this.getBasicStatus();
				String rhsBasicStatus;
				rhsBasicStatus = that.getBasicStatus();
				if (!strategy.equals(LocatorUtils.property(thisLocator, "basicStatus", lhsBasicStatus),
						LocatorUtils.property(thatLocator, "basicStatus", rhsBasicStatus), lhsBasicStatus,
						rhsBasicStatus)) {
					return false;
				}
			}
			{
				YAMAHAAV.MainZone.PowerControl lhsPowerControl;
				lhsPowerControl = this.getPowerControl();
				YAMAHAAV.MainZone.PowerControl rhsPowerControl;
				rhsPowerControl = that.getPowerControl();
				if (!strategy.equals(LocatorUtils.property(thisLocator, "powerControl", lhsPowerControl),
						LocatorUtils.property(thatLocator, "powerControl", rhsPowerControl), lhsPowerControl,
						rhsPowerControl)) {
					return false;
				}
			}
			{
				YAMAHAAV.MainZone.Volume lhsVolume;
				lhsVolume = this.getVolume();
				YAMAHAAV.MainZone.Volume rhsVolume;
				rhsVolume = that.getVolume();
				if (!strategy.equals(LocatorUtils.property(thisLocator, "volume", lhsVolume),
						LocatorUtils.property(thatLocator, "volume", rhsVolume), lhsVolume, rhsVolume)) {
					return false;
				}
			}
			{
				YAMAHAAV.MainZone.Input lhsInput;
				lhsInput = this.getInput();
				YAMAHAAV.MainZone.Input rhsInput;
				rhsInput = that.getInput();
				if (!strategy.equals(LocatorUtils.property(thisLocator, "input", lhsInput),
						LocatorUtils.property(thatLocator, "input", rhsInput), lhsInput, rhsInput)) {
					return false;
				}
			}
			{
				YAMAHAAV.MainZone.Surround lhsSurround;
				lhsSurround = this.getSurround();
				YAMAHAAV.MainZone.Surround rhsSurround;
				rhsSurround = that.getSurround();
				if (!strategy.equals(LocatorUtils.property(thisLocator, "surround", lhsSurround),
						LocatorUtils.property(thatLocator, "surround", rhsSurround), lhsSurround, rhsSurround)) {
					return false;
				}
			}
			{
				YAMAHAAV.MainZone.SoundVideo lhsSoundVideo;
				lhsSoundVideo = this.getSoundVideo();
				YAMAHAAV.MainZone.SoundVideo rhsSoundVideo;
				rhsSoundVideo = that.getSoundVideo();
				if (!strategy.equals(LocatorUtils.property(thisLocator, "soundVideo", lhsSoundVideo),
						LocatorUtils.property(thatLocator, "soundVideo", rhsSoundVideo), lhsSoundVideo,
						rhsSoundVideo)) {
					return false;
				}
			}
			return true;
		}

		public boolean equals(Object object) {
			final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
			return equals(null, null, object, strategy);
		}

		public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
			int currentHashCode = 1;
			{
				String theBasicStatus;
				theBasicStatus = this.getBasicStatus();
				currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "basicStatus", theBasicStatus),
						currentHashCode, theBasicStatus);
			}
			{
				YAMAHAAV.MainZone.PowerControl thePowerControl;
				thePowerControl = this.getPowerControl();
				currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "powerControl", thePowerControl),
						currentHashCode, thePowerControl);
			}
			{
				YAMAHAAV.MainZone.Volume theVolume;
				theVolume = this.getVolume();
				currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "volume", theVolume),
						currentHashCode, theVolume);
			}
			{
				YAMAHAAV.MainZone.Input theInput;
				theInput = this.getInput();
				currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "input", theInput), currentHashCode,
						theInput);
			}
			{
				YAMAHAAV.MainZone.Surround theSurround;
				theSurround = this.getSurround();
				currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "surround", theSurround),
						currentHashCode, theSurround);
			}
			{
				YAMAHAAV.MainZone.SoundVideo theSoundVideo;
				theSoundVideo = this.getSoundVideo();
				currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "soundVideo", theSoundVideo),
						currentHashCode, theSoundVideo);
			}
			return currentHashCode;
		}

		public int hashCode() {
			final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
			return this.hashCode(null, strategy);
		}

		public Object clone() {
			return copyTo(createNewInstance());
		}

		public Object copyTo(Object target) {
			final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
			return copyTo(null, target, strategy);
		}

		public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
			final Object draftCopy = ((target == null) ? createNewInstance() : target);
			if (draftCopy instanceof YAMAHAAV.MainZone) {
				final YAMAHAAV.MainZone copy = ((YAMAHAAV.MainZone) draftCopy);
				if (this.basicStatus != null) {
					String sourceBasicStatus;
					sourceBasicStatus = this.getBasicStatus();
					String copyBasicStatus = ((String) strategy
							.copy(LocatorUtils.property(locator, "basicStatus", sourceBasicStatus), sourceBasicStatus));
					copy.setBasicStatus(copyBasicStatus);
				} else {
					copy.basicStatus = null;
				}
				if (this.powerControl != null) {
					YAMAHAAV.MainZone.PowerControl sourcePowerControl;
					sourcePowerControl = this.getPowerControl();
					YAMAHAAV.MainZone.PowerControl copyPowerControl = ((YAMAHAAV.MainZone.PowerControl) strategy.copy(
							LocatorUtils.property(locator, "powerControl", sourcePowerControl), sourcePowerControl));
					copy.setPowerControl(copyPowerControl);
				} else {
					copy.powerControl = null;
				}
				if (this.volume != null) {
					YAMAHAAV.MainZone.Volume sourceVolume;
					sourceVolume = this.getVolume();
					YAMAHAAV.MainZone.Volume copyVolume = ((YAMAHAAV.MainZone.Volume) strategy
							.copy(LocatorUtils.property(locator, "volume", sourceVolume), sourceVolume));
					copy.setVolume(copyVolume);
				} else {
					copy.volume = null;
				}
				if (this.input != null) {
					YAMAHAAV.MainZone.Input sourceInput;
					sourceInput = this.getInput();
					YAMAHAAV.MainZone.Input copyInput = ((YAMAHAAV.MainZone.Input) strategy
							.copy(LocatorUtils.property(locator, "input", sourceInput), sourceInput));
					copy.setInput(copyInput);
				} else {
					copy.input = null;
				}
				if (this.surround != null) {
					YAMAHAAV.MainZone.Surround sourceSurround;
					sourceSurround = this.getSurround();
					YAMAHAAV.MainZone.Surround copySurround = ((YAMAHAAV.MainZone.Surround) strategy
							.copy(LocatorUtils.property(locator, "surround", sourceSurround), sourceSurround));
					copy.setSurround(copySurround);
				} else {
					copy.surround = null;
				}
				if (this.soundVideo != null) {
					YAMAHAAV.MainZone.SoundVideo sourceSoundVideo;
					sourceSoundVideo = this.getSoundVideo();
					YAMAHAAV.MainZone.SoundVideo copySoundVideo = ((YAMAHAAV.MainZone.SoundVideo) strategy
							.copy(LocatorUtils.property(locator, "soundVideo", sourceSoundVideo), sourceSoundVideo));
					copy.setSoundVideo(copySoundVideo);
				} else {
					copy.soundVideo = null;
				}
			}
			return draftCopy;
		}

		public Object createNewInstance() {
			return new YAMAHAAV.MainZone();
		}

		/**
		 * <p>
		 * Java class for anonymous complex type.
		 * 
		 * <p>
		 * The following schema fragment specifies the expected content
		 * contained within this class.
		 * 
		 * <pre>
		 *   <Input>
		 *	   	<Input_Sel>HDMI1</Input_Sel>
		 *	    	<Input_Sel_Item_Info>
		 *	         	<Param>HDMI1</Param>
		 *	             <RW>RW</RW>
		 *	             <Title>  APPLE  </Title>
		 *	             <Icon>
		 *	             	<On>/YamahaRemoteControl/Icons/icon004.png</On>
		 *	                    <Off></Off>
		 *	             </Icon>
		 *				 <Src_Name></Src_Name>
		 *	             <Src_Number>1</Src_Number>
		 *	        </Input_Sel_Item_Info>
		 *	  </Input>
		 * </pre>
		 */
		@XmlAccessorType(XmlAccessType.FIELD)
		@XmlType(name = "", propOrder = { "inputSel", "inputSelItemInfo" })
		public static class Input implements Cloneable, CopyTo, Equals, HashCode, ToString {

			@XmlElement(name = "Input_Sel", required = true)
			protected String inputSel;
			@XmlElement(name = "Input_Sel_Item_Info", required = true)
			protected YAMAHAAV.MainZone.Input.InputSelItemInfo inputSelItemInfo;

			/**
			 * Gets the value of the inputSel property.
			 * 
			 * @return possible object is {@link String }
			 * 
			 */
			public String getInputSel() {
				return inputSel;
			}

			/**
			 * Sets the value of the inputSel property.
			 * 
			 * @param value
			 *            allowed object is {@link String }
			 * 
			 */
			public void setInputSel(String value) {
				this.inputSel = value;
			}

			/**
			 * Gets the value of the inputSelItemInfo property.
			 * 
			 * @return possible object is
			 *         {@link YAMAHAAV.MainZone.Input.InputSelItemInfo }
			 * 
			 */
			public YAMAHAAV.MainZone.Input.InputSelItemInfo getInputSelItemInfo() {
				return inputSelItemInfo;
			}

			/**
			 * Sets the value of the inputSelItemInfo property.
			 * 
			 * @param value
			 *            allowed object is
			 *            {@link YAMAHAAV.MainZone.Input.InputSelItemInfo }
			 * 
			 */
			public void setInputSelItemInfo(YAMAHAAV.MainZone.Input.InputSelItemInfo value) {
				this.inputSelItemInfo = value;
			}

			public String toString() {
				YAMAHAAV yamahaav = YAMAHAAV.createRoot();
				yamahaav.getMainZone().setInput(Input.this);
				;
				return yamahaav.toString();
			}

			public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
				strategy.appendStart(locator, this, buffer);
				appendFields(locator, buffer, strategy);
				strategy.appendEnd(locator, this, buffer);
				return buffer;
			}

			public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
				{
					String theInputSel;
					theInputSel = this.getInputSel();
					strategy.appendField(locator, this, "inputSel", buffer, theInputSel);
				}
				{
					YAMAHAAV.MainZone.Input.InputSelItemInfo theInputSelItemInfo;
					theInputSelItemInfo = this.getInputSelItemInfo();
					strategy.appendField(locator, this, "inputSelItemInfo", buffer, theInputSelItemInfo);
				}
				return buffer;
			}

			public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
					EqualsStrategy strategy) {
				if (!(object instanceof YAMAHAAV.MainZone.Input)) {
					return false;
				}
				if (this == object) {
					return true;
				}
				final YAMAHAAV.MainZone.Input that = ((YAMAHAAV.MainZone.Input) object);
				{
					String lhsInputSel;
					lhsInputSel = this.getInputSel();
					String rhsInputSel;
					rhsInputSel = that.getInputSel();
					if (!strategy.equals(LocatorUtils.property(thisLocator, "inputSel", lhsInputSel),
							LocatorUtils.property(thatLocator, "inputSel", rhsInputSel), lhsInputSel, rhsInputSel)) {
						return false;
					}
				}
				{
					YAMAHAAV.MainZone.Input.InputSelItemInfo lhsInputSelItemInfo;
					lhsInputSelItemInfo = this.getInputSelItemInfo();
					YAMAHAAV.MainZone.Input.InputSelItemInfo rhsInputSelItemInfo;
					rhsInputSelItemInfo = that.getInputSelItemInfo();
					if (!strategy.equals(LocatorUtils.property(thisLocator, "inputSelItemInfo", lhsInputSelItemInfo),
							LocatorUtils.property(thatLocator, "inputSelItemInfo", rhsInputSelItemInfo),
							lhsInputSelItemInfo, rhsInputSelItemInfo)) {
						return false;
					}
				}
				return true;
			}

			public boolean equals(Object object) {
				final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
				return equals(null, null, object, strategy);
			}

			public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
				int currentHashCode = 1;
				{
					String theInputSel;
					theInputSel = this.getInputSel();
					currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "inputSel", theInputSel),
							currentHashCode, theInputSel);
				}
				{
					YAMAHAAV.MainZone.Input.InputSelItemInfo theInputSelItemInfo;
					theInputSelItemInfo = this.getInputSelItemInfo();
					currentHashCode = strategy.hashCode(
							LocatorUtils.property(locator, "inputSelItemInfo", theInputSelItemInfo), currentHashCode,
							theInputSelItemInfo);
				}
				return currentHashCode;
			}

			public int hashCode() {
				final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
				return this.hashCode(null, strategy);
			}

			public Object clone() {
				return copyTo(createNewInstance());
			}

			public Object copyTo(Object target) {
				final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
				return copyTo(null, target, strategy);
			}

			public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
				final Object draftCopy = ((target == null) ? createNewInstance() : target);
				if (draftCopy instanceof YAMAHAAV.MainZone.Input) {
					final YAMAHAAV.MainZone.Input copy = ((YAMAHAAV.MainZone.Input) draftCopy);
					if (this.inputSel != null) {
						String sourceInputSel;
						sourceInputSel = this.getInputSel();
						String copyInputSel = ((String) strategy
								.copy(LocatorUtils.property(locator, "inputSel", sourceInputSel), sourceInputSel));
						copy.setInputSel(copyInputSel);
					} else {
						copy.inputSel = null;
					}
					if (this.inputSelItemInfo != null) {
						YAMAHAAV.MainZone.Input.InputSelItemInfo sourceInputSelItemInfo;
						sourceInputSelItemInfo = this.getInputSelItemInfo();
						YAMAHAAV.MainZone.Input.InputSelItemInfo copyInputSelItemInfo = ((YAMAHAAV.MainZone.Input.InputSelItemInfo) strategy
								.copy(LocatorUtils.property(locator, "inputSelItemInfo", sourceInputSelItemInfo),
										sourceInputSelItemInfo));
						copy.setInputSelItemInfo(copyInputSelItemInfo);
					} else {
						copy.inputSelItemInfo = null;
					}
				}
				return draftCopy;
			}

			public Object createNewInstance() {
				return new YAMAHAAV.MainZone.Input();
			}

			/**
			 * <p>
			 * Java class for anonymous complex type.
			 * 
			 * <p>
			 * The following schema fragment specifies the expected content
			 * contained within this class.
			 * 
			 * <pre>
			 *	   	<Input_Sel>HDMI1</Input_Sel>
			 *	    	<Input_Sel_Item_Info>
			 *	         	<Param>HDMI1</Param>
			 *	             <RW>RW</RW>
			 *	             <Title>  APPLE  </Title>
			 *	             <Icon>
			 *	             	<On>/YamahaRemoteControl/Icons/icon004.png</On>
			 *	                    <Off></Off>
			 *	             </Icon>
			 *				 <Src_Name></Src_Name>
			 *	             <Src_Number>1</Src_Number>
			 *	        </Input_Sel_Item_Info>
			 * </pre>
			 * 
			 * 
			 */
			@XmlAccessorType(XmlAccessType.FIELD)
			@XmlType(name = "", propOrder = { "param", "rw", "title", "icon", "srcName", "srcNumber" })
			public static class InputSelItemInfo implements Cloneable, CopyTo, Equals, HashCode, ToString {

				@XmlElement(name = "Param", required = true)
				protected String param;
				@XmlElement(name = "RW", required = true)
				protected String rw;
				@XmlElement(name = "Title", required = true)
				protected String title;
				@XmlElement(name = "Icon", required = true)
				protected YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon icon;
				@XmlElement(name = "Src_Name", required = true)
				protected String srcName;
				@XmlElement(name = "Src_Number")
				protected byte srcNumber;

				/**
				 * Gets the value of the param property.
				 * 
				 * @return possible object is {@link String }
				 * 
				 */
				public String getParam() {
					return param;
				}

				/**
				 * Sets the value of the param property.
				 * 
				 * @param value
				 *            allowed object is {@link String }
				 * 
				 */
				public void setParam(String value) {
					this.param = value;
				}

				/**
				 * Gets the value of the rw property.
				 * 
				 * @return possible object is {@link String }
				 * 
				 */
				public String getRW() {
					return rw;
				}

				/**
				 * Sets the value of the rw property.
				 * 
				 * @param value
				 *            allowed object is {@link String }
				 * 
				 */
				public void setRW(String value) {
					this.rw = value;
				}

				/**
				 * Gets the value of the title property.
				 * 
				 * @return possible object is {@link String }
				 * 
				 */
				public String getTitle() {
					return title;
				}

				/**
				 * Sets the value of the title property.
				 * 
				 * @param value
				 *            allowed object is {@link String }
				 * 
				 */
				public void setTitle(String value) {
					this.title = value;
				}

				/**
				 * Gets the value of the icon property.
				 * 
				 * @return possible object is
				 *         {@link YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon
				 *         }
				 * 
				 */
				public YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon getIcon() {
					return icon;
				}

				/**
				 * Sets the value of the icon property.
				 * 
				 * @param value
				 *            allowed object is
				 *            {@link YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon
				 *            }
				 * 
				 */
				public void setIcon(YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon value) {
					this.icon = value;
				}

				/**
				 * Gets the value of the srcName property.
				 * 
				 * @return possible object is {@link String }
				 * 
				 */
				public String getSrcName() {
					return srcName;
				}

				/**
				 * Sets the value of the srcName property.
				 * 
				 * @param value
				 *            allowed object is {@link String }
				 * 
				 */
				public void setSrcName(String value) {
					this.srcName = value;
				}

				/**
				 * Gets the value of the srcNumber property.
				 * 
				 */
				public byte getSrcNumber() {
					return srcNumber;
				}

				/**
				 * Sets the value of the srcNumber property.
				 * 
				 */
				public void setSrcNumber(byte value) {
					this.srcNumber = value;
				}

				public String toString() {
					final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
					final StringBuilder buffer = new StringBuilder();
					append(null, buffer, strategy);
					return buffer.toString();
				}

				public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
					strategy.appendStart(locator, this, buffer);
					appendFields(locator, buffer, strategy);
					strategy.appendEnd(locator, this, buffer);
					return buffer;
				}

				public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer,
						ToStringStrategy strategy) {
					{
						String theParam;
						theParam = this.getParam();
						strategy.appendField(locator, this, "param", buffer, theParam);
					}
					{
						String theRW;
						theRW = this.getRW();
						strategy.appendField(locator, this, "rw", buffer, theRW);
					}
					{
						String theTitle;
						theTitle = this.getTitle();
						strategy.appendField(locator, this, "title", buffer, theTitle);
					}
					{
						YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon theIcon;
						theIcon = this.getIcon();
						strategy.appendField(locator, this, "icon", buffer, theIcon);
					}
					{
						String theSrcName;
						theSrcName = this.getSrcName();
						strategy.appendField(locator, this, "srcName", buffer, theSrcName);
					}
					{
						byte theSrcNumber;
						theSrcNumber =this.getSrcNumber();
						strategy.appendField(locator, this, "srcNumber", buffer, theSrcNumber);
					}
					return buffer;
				}

				public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
						EqualsStrategy strategy) {
					if (!(object instanceof YAMAHAAV.MainZone.Input.InputSelItemInfo)) {
						return false;
					}
					if (this == object) {
						return true;
					}
					final YAMAHAAV.MainZone.Input.InputSelItemInfo that = ((YAMAHAAV.MainZone.Input.InputSelItemInfo) object);
					{
						String lhsParam;
						lhsParam = this.getParam();
						String rhsParam;
						rhsParam = that.getParam();
						if (!strategy.equals(LocatorUtils.property(thisLocator, "param", lhsParam),
								LocatorUtils.property(thatLocator, "param", rhsParam), lhsParam, rhsParam)) {
							return false;
						}
					}
					{
						String lhsRW;
						lhsRW = this.getRW();
						String rhsRW;
						rhsRW = that.getRW();
						if (!strategy.equals(LocatorUtils.property(thisLocator, "rw", lhsRW),
								LocatorUtils.property(thatLocator, "rw", rhsRW), lhsRW, rhsRW)) {
							return false;
						}
					}
					{
						String lhsTitle;
						lhsTitle = this.getTitle();
						String rhsTitle;
						rhsTitle = that.getTitle();
						if (!strategy.equals(LocatorUtils.property(thisLocator, "title", lhsTitle),
								LocatorUtils.property(thatLocator, "title", rhsTitle), lhsTitle, rhsTitle)) {
							return false;
						}
					}
					{
						YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon lhsIcon;
						lhsIcon = this.getIcon();
						YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon rhsIcon;
						rhsIcon = that.getIcon();
						if (!strategy.equals(LocatorUtils.property(thisLocator, "icon", lhsIcon),
								LocatorUtils.property(thatLocator, "icon", rhsIcon), lhsIcon, rhsIcon)) {
							return false;
						}
					}
					{
						String lhsSrcName;
						lhsSrcName = this.getSrcName();
						String rhsSrcName;
						rhsSrcName = that.getSrcName();
						if (!strategy.equals(LocatorUtils.property(thisLocator, "srcName", lhsSrcName),
								LocatorUtils.property(thatLocator, "srcName", rhsSrcName), lhsSrcName, rhsSrcName)) {
							return false;
						}
					}
					{
						byte lhsSrcNumber;
						lhsSrcNumber = this.getSrcNumber();
						byte rhsSrcNumber;
						rhsSrcNumber = that.getSrcNumber();
						if (!strategy.equals(LocatorUtils.property(thisLocator, "srcNumber", lhsSrcNumber),
								LocatorUtils.property(thatLocator, "srcNumber", rhsSrcNumber), lhsSrcNumber,
								rhsSrcNumber)) {
							return false;
						}
					}
					return true;
				}

				public boolean equals(Object object) {
					final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
					return equals(null, null, object, strategy);
				}

				public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
					int currentHashCode = 1;
					{
						String theParam;
						theParam = this.getParam();
						currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "param", theParam),
								currentHashCode, theParam);
					}
					{
						String theRW;
						theRW = this.getRW();
						currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rw", theRW),
								currentHashCode, theRW);
					}
					{
						String theTitle;
						theTitle = this.getTitle();
						currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "title", theTitle),
								currentHashCode, theTitle);
					}
					{
						YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon theIcon;
						theIcon = this.getIcon();
						currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "icon", theIcon),
								currentHashCode, theIcon);
					}
					{
						String theSrcName;
						theSrcName = this.getSrcName();
						currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "srcName", theSrcName),
								currentHashCode, theSrcName);
					}
					{
						byte theSrcNumber;
						theSrcNumber = this.getSrcNumber();
						currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "srcNumber", theSrcNumber),
								currentHashCode, theSrcNumber);
					}
					return currentHashCode;
				}

				public int hashCode() {
					final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
					return this.hashCode(null, strategy);
				}

				public Object clone() {
					return copyTo(createNewInstance());
				}

				public Object copyTo(Object target) {
					final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
					return copyTo(null, target, strategy);
				}

				public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
					final Object draftCopy = ((target == null) ? createNewInstance() : target);
					if (draftCopy instanceof YAMAHAAV.MainZone.Input.InputSelItemInfo) {
						final YAMAHAAV.MainZone.Input.InputSelItemInfo copy = ((YAMAHAAV.MainZone.Input.InputSelItemInfo) draftCopy);
						if (this.param != null) {
							String sourceParam;
							sourceParam = this.getParam();
							String copyParam = ((String) strategy
									.copy(LocatorUtils.property(locator, "param", sourceParam), sourceParam));
							copy.setParam(copyParam);
						} else {
							copy.param = null;
						}
						if (this.rw != null) {
							String sourceRW;
							sourceRW = this.getRW();
							String copyRW = ((String) strategy.copy(LocatorUtils.property(locator, "rw", sourceRW),
									sourceRW));
							copy.setRW(copyRW);
						} else {
							copy.rw = null;
						}
						if (this.title != null) {
							String sourceTitle;
							sourceTitle = this.getTitle();
							String copyTitle = ((String) strategy
									.copy(LocatorUtils.property(locator, "title", sourceTitle), sourceTitle));
							copy.setTitle(copyTitle);
						} else {
							copy.title = null;
						}
						if (this.icon != null) {
							YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon sourceIcon;
							sourceIcon = this.getIcon();
							YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon copyIcon = ((YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon) strategy
									.copy(LocatorUtils.property(locator, "icon", sourceIcon), sourceIcon));
							copy.setIcon(copyIcon);
						} else {
							copy.icon = null;
						}
						if (this.srcName != null) {
							String sourceSrcName;
							sourceSrcName = this.getSrcName();
							String copySrcName = ((String) strategy
									.copy(LocatorUtils.property(locator, "srcName", sourceSrcName), sourceSrcName));
							copy.setSrcName(copySrcName);
						} else {
							copy.srcName = null;
						}
						byte sourceSrcNumber;
						sourceSrcNumber = this.getSrcNumber();
						byte copySrcNumber = strategy.copy(LocatorUtils.property(locator, "srcNumber", sourceSrcNumber),
								sourceSrcNumber);
						copy.setSrcNumber(copySrcNumber);
					}
					return draftCopy;
				}

				public Object createNewInstance() {
					return new YAMAHAAV.MainZone.Input.InputSelItemInfo();
				}

				/**
				 * <p>
				 * Java class for anonymous complex type.
				 * 
				 * <p>
				 * The following schema fragment specifies the expected content
				 * contained within this class.
				 * 
				 * <pre>
				 * &lt;complexType>
				 *   &lt;complexContent>
				 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
				 *       &lt;sequence>
				 *         &lt;element name="On" type="{http://www.w3.org/2001/XMLSchema}string"/>
				 *         &lt;element name="Off" type="{http://www.w3.org/2001/XMLSchema}string"/>
				 *       &lt;/sequence>
				 *     &lt;/restriction>
				 *   &lt;/complexContent>
				 * &lt;/complexType>
				 * </pre>
				 * 
				 * 
				 */
				@XmlAccessorType(XmlAccessType.FIELD)
				@XmlType(name = "", propOrder = { "on", "off" })
				public static class Icon implements Cloneable, CopyTo, Equals, HashCode, ToString {

					@XmlElement(name = "On", required = true)
					protected String on;
					@XmlElement(name = "Off", required = true)
					protected String off;

					/**
					 * Gets the value of the on property.
					 * 
					 * @return possible object is {@link String }
					 * 
					 */
					public String getOn() {
						return on;
					}

					/**
					 * Sets the value of the on property.
					 * 
					 * @param value
					 *            allowed object is {@link String }
					 * 
					 */
					public void setOn(String value) {
						this.on = value;
					}

					/**
					 * Gets the value of the off property.
					 * 
					 * @return possible object is {@link String }
					 * 
					 */
					public String getOff() {
						return off;
					}

					/**
					 * Sets the value of the off property.
					 * 
					 * @param value
					 *            allowed object is {@link String }
					 * 
					 */
					public void setOff(String value) {
						this.off = value;
					}

					public String toString() {
						final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
						final StringBuilder buffer = new StringBuilder();
						append(null, buffer, strategy);
						return buffer.toString();
					}

					public StringBuilder append(ObjectLocator locator, StringBuilder buffer,
							ToStringStrategy strategy) {
						strategy.appendStart(locator, this, buffer);
						appendFields(locator, buffer, strategy);
						strategy.appendEnd(locator, this, buffer);
						return buffer;
					}

					public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer,
							ToStringStrategy strategy) {
						{
							String theOn;
							theOn = this.getOn();
							strategy.appendField(locator, this, "on", buffer, theOn);
						}
						{
							String theOff;
							theOff = this.getOff();
							strategy.appendField(locator, this, "off", buffer, theOff);
						}
						return buffer;
					}

					public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
							EqualsStrategy strategy) {
						if (!(object instanceof YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon)) {
							return false;
						}
						if (this == object) {
							return true;
						}
						final YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon that = ((YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon) object);
						{
							String lhsOn;
							lhsOn = this.getOn();
							String rhsOn;
							rhsOn = that.getOn();
							if (!strategy.equals(LocatorUtils.property(thisLocator, "on", lhsOn),
									LocatorUtils.property(thatLocator, "on", rhsOn), lhsOn, rhsOn)) {
								return false;
							}
						}
						{
							String lhsOff;
							lhsOff = this.getOff();
							String rhsOff;
							rhsOff = that.getOff();
							if (!strategy.equals(LocatorUtils.property(thisLocator, "off", lhsOff),
									LocatorUtils.property(thatLocator, "off", rhsOff), lhsOff, rhsOff)) {
								return false;
							}
						}
						return true;
					}

					public boolean equals(Object object) {
						final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
						return equals(null, null, object, strategy);
					}

					public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
						int currentHashCode = 1;
						{
							String theOn;
							theOn = this.getOn();
							currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "on", theOn),
									currentHashCode, theOn);
						}
						{
							String theOff;
							theOff = this.getOff();
							currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "off", theOff),
									currentHashCode, theOff);
						}
						return currentHashCode;
					}

					public int hashCode() {
						final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
						return this.hashCode(null, strategy);
					}

					public Object clone() {
						return copyTo(createNewInstance());
					}

					public Object copyTo(Object target) {
						final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
						return copyTo(null, target, strategy);
					}

					public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
						final Object draftCopy = ((target == null) ? createNewInstance() : target);
						if (draftCopy instanceof YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon) {
							final YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon copy = ((YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon) draftCopy);
							if (this.on != null) {
								String sourceOn;
								sourceOn = this.getOn();
								String copyOn = ((String) strategy.copy(LocatorUtils.property(locator, "on", sourceOn),
										sourceOn));
								copy.setOn(copyOn);
							} else {
								copy.on = null;
							}
							if (this.off != null) {
								String sourceOff;
								sourceOff = this.getOff();
								String copyOff = ((String) strategy
										.copy(LocatorUtils.property(locator, "off", sourceOff), sourceOff));
								copy.setOff(copyOff);
							} else {
								copy.off = null;
							}
						}
						return draftCopy;
					}

					public Object createNewInstance() {
						return new YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon();
					}

				}

			}

		}

		/**
		 * <p>
		 * Java class for anonymous complex type.
		 * 
		 * <p>
		 * The following schema fragment specifies the expected content
		 * contained within this class.
		 * 
		 * <pre>
		 * &lt;complexType>
		 *   &lt;complexContent>
		 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
		 *       &lt;sequence>
		 *         &lt;element name="Power" type="{http://www.w3.org/2001/XMLSchema}string"/>
		 *         &lt;element name="Sleep" type="{http://www.w3.org/2001/XMLSchema}string"/>
		 *       &lt;/sequence>
		 *     &lt;/restriction>
		 *   &lt;/complexContent>
		 * &lt;/complexType>
		 * </pre>
		 * 
		 * 
		 */
		@XmlAccessorType(XmlAccessType.FIELD)
		@XmlType(name = "", propOrder = { "power", "sleep" })
		public static class PowerControl implements Cloneable, CopyTo, Equals, HashCode, ToString {

			@XmlElement(name = "Power", required = true)
			protected String power;
			@XmlElement(name = "Sleep", required = true)
			protected String sleep;

			/**
			 * Gets the value of the power property.
			 * 
			 * @return possible object is {@link String }
			 * 
			 */
			public String getPower() {
				return power;
			}

			/**
			 * Sets the value of the power property.
			 * 
			 * @param value
			 *            allowed object is {@link String }
			 * 
			 */
			public void setPower(String value) {
				this.power = value;
			}

			/**
			 * Gets the value of the sleep property.
			 * 
			 * @return possible object is {@link String }
			 * 
			 */
			public String getSleep() {
				return sleep;
			}

			/**
			 * Sets the value of the sleep property.
			 * 
			 * @param value
			 *            allowed object is {@link String }
			 * 
			 */
			public void setSleep(String value) {
				this.sleep = value;
			}

			public String toString() {
				YAMAHAAV yamahaav = YAMAHAAV.createRoot();
				yamahaav.getMainZone().setPowerControl(PowerControl.this);
				;
				return yamahaav.toString();
			}

			public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
				strategy.appendStart(locator, this, buffer);
				appendFields(locator, buffer, strategy);
				strategy.appendEnd(locator, this, buffer);
				return buffer;
			}

			public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
				{
					String thePower;
					thePower = this.getPower();
					strategy.appendField(locator, this, "power", buffer, thePower);
				}
				{
					String theSleep;
					theSleep = this.getSleep();
					strategy.appendField(locator, this, "sleep", buffer, theSleep);
				}
				return buffer;
			}

			public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
					EqualsStrategy strategy) {
				if (!(object instanceof YAMAHAAV.MainZone.PowerControl)) {
					return false;
				}
				if (this == object) {
					return true;
				}
				final YAMAHAAV.MainZone.PowerControl that = ((YAMAHAAV.MainZone.PowerControl) object);
				{
					String lhsPower;
					lhsPower = this.getPower();
					String rhsPower;
					rhsPower = that.getPower();
					if (!strategy.equals(LocatorUtils.property(thisLocator, "power", lhsPower),
							LocatorUtils.property(thatLocator, "power", rhsPower), lhsPower, rhsPower)) {
						return false;
					}
				}
				{
					String lhsSleep;
					lhsSleep = this.getSleep();
					String rhsSleep;
					rhsSleep = that.getSleep();
					if (!strategy.equals(LocatorUtils.property(thisLocator, "sleep", lhsSleep),
							LocatorUtils.property(thatLocator, "sleep", rhsSleep), lhsSleep, rhsSleep)) {
						return false;
					}
				}
				return true;
			}

			public boolean equals(Object object) {
				final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
				return equals(null, null, object, strategy);
			}

			public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
				int currentHashCode = 1;
				{
					String thePower;
					thePower = this.getPower();
					currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "power", thePower),
							currentHashCode, thePower);
				}
				{
					String theSleep;
					theSleep = this.getSleep();
					currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sleep", theSleep),
							currentHashCode, theSleep);
				}
				return currentHashCode;
			}

			public int hashCode() {
				final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
				return this.hashCode(null, strategy);
			}

			public Object clone() {
				return copyTo(createNewInstance());
			}

			public Object copyTo(Object target) {
				final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
				return copyTo(null, target, strategy);
			}

			public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
				final Object draftCopy = ((target == null) ? createNewInstance() : target);
				if (draftCopy instanceof YAMAHAAV.MainZone.PowerControl) {
					final YAMAHAAV.MainZone.PowerControl copy = ((YAMAHAAV.MainZone.PowerControl) draftCopy);
					if (this.power != null) {
						String sourcePower;
						sourcePower = this.getPower();
						String copyPower = ((String) strategy.copy(LocatorUtils.property(locator, "power", sourcePower),
								sourcePower));
						copy.setPower(copyPower);
					} else {
						copy.power = null;
					}
					if (this.sleep != null) {
						String sourceSleep;
						sourceSleep = this.getSleep();
						String copySleep = ((String) strategy.copy(LocatorUtils.property(locator, "sleep", sourceSleep),
								sourceSleep));
						copy.setSleep(copySleep);
					} else {
						copy.sleep = null;
					}
				}
				return draftCopy;
			}

			public Object createNewInstance() {
				return new YAMAHAAV.MainZone.PowerControl();
			}

		}

		/**
		 * <p>
		 * Java class for anonymous complex type.
		 * 
		 * <p>
		 * The following schema fragment specifies the expected content
		 * contained within this class.
		 * 
		 * <pre>
		 * &lt;complexType>
		 *   &lt;complexContent>
		 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
		 *       &lt;sequence>
		 *         &lt;element name="Tone">
		 *           &lt;complexType>
		 *             &lt;complexContent>
		 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
		 *                 &lt;sequence>
		 *                   &lt;element name="Bass">
		 *                     &lt;complexType>
		 *                       &lt;complexContent>
		 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
		 *                           &lt;sequence>
		 *                             &lt;element name="Val" type="{http://www.w3.org/2001/XMLSchema}byte"/>
		 *                             &lt;element name="Exp" type="{http://www.w3.org/2001/XMLSchema}byte"/>
		 *                             &lt;element name="Unit" type="{http://www.w3.org/2001/XMLSchema}string"/>
		 *                           &lt;/sequence>
		 *                         &lt;/restriction>
		 *                       &lt;/complexContent>
		 *                     &lt;/complexType>
		 *                   &lt;/element>
		 *                   &lt;element name="Treble">
		 *                     &lt;complexType>
		 *                       &lt;complexContent>
		 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
		 *                           &lt;sequence>
		 *                             &lt;element name="Val" type="{http://www.w3.org/2001/XMLSchema}byte"/>
		 *                             &lt;element name="Exp" type="{http://www.w3.org/2001/XMLSchema}byte"/>
		 *                             &lt;element name="Unit" type="{http://www.w3.org/2001/XMLSchema}string"/>
		 *                           &lt;/sequence>
		 *                         &lt;/restriction>
		 *                       &lt;/complexContent>
		 *                     &lt;/complexType>
		 *                   &lt;/element>
		 *                 &lt;/sequence>
		 *               &lt;/restriction>
		 *             &lt;/complexContent>
		 *           &lt;/complexType>
		 *         &lt;/element>
		 *         &lt;element name="Direct">
		 *           &lt;complexType>
		 *             &lt;complexContent>
		 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
		 *                 &lt;sequence>
		 *                   &lt;element name="Mode" type="{http://www.w3.org/2001/XMLSchema}string"/>
		 *                 &lt;/sequence>
		 *               &lt;/restriction>
		 *             &lt;/complexContent>
		 *           &lt;/complexType>
		 *         &lt;/element>
		 *         &lt;element name="HDMI">
		 *           &lt;complexType>
		 *             &lt;complexContent>
		 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
		 *                 &lt;sequence>
		 *                   &lt;element name="Standby_Through_Info" type="{http://www.w3.org/2001/XMLSchema}string"/>
		 *                   &lt;element name="Output">
		 *                     &lt;complexType>
		 *                       &lt;complexContent>
		 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
		 *                           &lt;sequence>
		 *                             &lt;element name="OUT_1" type="{http://www.w3.org/2001/XMLSchema}string"/>
		 *                           &lt;/sequence>
		 *                         &lt;/restriction>
		 *                       &lt;/complexContent>
		 *                     &lt;/complexType>
		 *                   &lt;/element>
		 *                 &lt;/sequence>
		 *               &lt;/restriction>
		 *             &lt;/complexContent>
		 *           &lt;/complexType>
		 *         &lt;/element>
		 *         &lt;element name="Adaptive_DRC" type="{http://www.w3.org/2001/XMLSchema}string"/>
		 *       &lt;/sequence>
		 *     &lt;/restriction>
		 *   &lt;/complexContent>
		 * &lt;/complexType>
		 * </pre>
		 * 
		 * 
		 */
		@XmlAccessorType(XmlAccessType.FIELD)
		@XmlType(name = "", propOrder = { "tone", "direct", "hdmi", "adaptiveDRC" })
		public static class SoundVideo implements Cloneable, CopyTo, Equals, HashCode, ToString {

			@XmlElement(name = "Tone", required = true)
			protected YAMAHAAV.MainZone.SoundVideo.Tone tone;
			@XmlElement(name = "Direct", required = true)
			protected YAMAHAAV.MainZone.SoundVideo.Direct direct;
			@XmlElement(name = "HDMI", required = true)
			protected YAMAHAAV.MainZone.SoundVideo.HDMI hdmi;
			@XmlElement(name = "Adaptive_DRC", required = true)
			protected String adaptiveDRC;

			/**
			 * Gets the value of the tone property.
			 * 
			 * @return possible object is
			 *         {@link YAMAHAAV.MainZone.SoundVideo.Tone }
			 * 
			 */
			public YAMAHAAV.MainZone.SoundVideo.Tone getTone() {
				return tone;
			}

			/**
			 * Sets the value of the tone property.
			 * 
			 * @param value
			 *            allowed object is
			 *            {@link YAMAHAAV.MainZone.SoundVideo.Tone }
			 * 
			 */
			public void setTone(YAMAHAAV.MainZone.SoundVideo.Tone value) {
				this.tone = value;
			}

			/**
			 * Gets the value of the direct property.
			 * 
			 * @return possible object is
			 *         {@link YAMAHAAV.MainZone.SoundVideo.Direct }
			 * 
			 */
			public YAMAHAAV.MainZone.SoundVideo.Direct getDirect() {
				return direct;
			}

			/**
			 * Sets the value of the direct property.
			 * 
			 * @param value
			 *            allowed object is
			 *            {@link YAMAHAAV.MainZone.SoundVideo.Direct }
			 * 
			 */
			public void setDirect(YAMAHAAV.MainZone.SoundVideo.Direct value) {
				this.direct = value;
			}

			/**
			 * Gets the value of the hdmi property.
			 * 
			 * @return possible object is
			 *         {@link YAMAHAAV.MainZone.SoundVideo.HDMI }
			 * 
			 */
			public YAMAHAAV.MainZone.SoundVideo.HDMI getHDMI() {
				return hdmi;
			}

			/**
			 * Sets the value of the hdmi property.
			 * 
			 * @param value
			 *            allowed object is
			 *            {@link YAMAHAAV.MainZone.SoundVideo.HDMI }
			 * 
			 */
			public void setHDMI(YAMAHAAV.MainZone.SoundVideo.HDMI value) {
				this.hdmi = value;
			}

			/**
			 * Gets the value of the adaptiveDRC property.
			 * 
			 * @return possible object is {@link String }
			 * 
			 */
			public String getAdaptiveDRC() {
				return adaptiveDRC;
			}

			/**
			 * Sets the value of the adaptiveDRC property.
			 * 
			 * @param value
			 *            allowed object is {@link String }
			 * 
			 */
			public void setAdaptiveDRC(String value) {
				this.adaptiveDRC = value;
			}

			public String toString() {
				YAMAHAAV yamahaav = YAMAHAAV.createRoot();
				yamahaav.getMainZone().setSoundVideo(SoundVideo.this);
				;
				return yamahaav.toString();
			}

			public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
				strategy.appendStart(locator, this, buffer);
				appendFields(locator, buffer, strategy);
				strategy.appendEnd(locator, this, buffer);
				return buffer;
			}

			public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
				{
					YAMAHAAV.MainZone.SoundVideo.Tone theTone;
					theTone = this.getTone();
					strategy.appendField(locator, this, "tone", buffer, theTone);
				}
				{
					YAMAHAAV.MainZone.SoundVideo.Direct theDirect;
					theDirect = this.getDirect();
					strategy.appendField(locator, this, "direct", buffer, theDirect);
				}
				{
					YAMAHAAV.MainZone.SoundVideo.HDMI theHDMI;
					theHDMI = this.getHDMI();
					strategy.appendField(locator, this, "hdmi", buffer, theHDMI);
				}
				{
					String theAdaptiveDRC;
					theAdaptiveDRC = this.getAdaptiveDRC();
					strategy.appendField(locator, this, "adaptiveDRC", buffer, theAdaptiveDRC);
				}
				return buffer;
			}

			public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
					EqualsStrategy strategy) {
				if (!(object instanceof YAMAHAAV.MainZone.SoundVideo)) {
					return false;
				}
				if (this == object) {
					return true;
				}
				final YAMAHAAV.MainZone.SoundVideo that = ((YAMAHAAV.MainZone.SoundVideo) object);
				{
					YAMAHAAV.MainZone.SoundVideo.Tone lhsTone;
					lhsTone = this.getTone();
					YAMAHAAV.MainZone.SoundVideo.Tone rhsTone;
					rhsTone = that.getTone();
					if (!strategy.equals(LocatorUtils.property(thisLocator, "tone", lhsTone),
							LocatorUtils.property(thatLocator, "tone", rhsTone), lhsTone, rhsTone)) {
						return false;
					}
				}
				{
					YAMAHAAV.MainZone.SoundVideo.Direct lhsDirect;
					lhsDirect = this.getDirect();
					YAMAHAAV.MainZone.SoundVideo.Direct rhsDirect;
					rhsDirect = that.getDirect();
					if (!strategy.equals(LocatorUtils.property(thisLocator, "direct", lhsDirect),
							LocatorUtils.property(thatLocator, "direct", rhsDirect), lhsDirect, rhsDirect)) {
						return false;
					}
				}
				{
					YAMAHAAV.MainZone.SoundVideo.HDMI lhsHDMI;
					lhsHDMI = this.getHDMI();
					YAMAHAAV.MainZone.SoundVideo.HDMI rhsHDMI;
					rhsHDMI = that.getHDMI();
					if (!strategy.equals(LocatorUtils.property(thisLocator, "hdmi", lhsHDMI),
							LocatorUtils.property(thatLocator, "hdmi", rhsHDMI), lhsHDMI, rhsHDMI)) {
						return false;
					}
				}
				{
					String lhsAdaptiveDRC;
					lhsAdaptiveDRC = this.getAdaptiveDRC();
					String rhsAdaptiveDRC;
					rhsAdaptiveDRC = that.getAdaptiveDRC();
					if (!strategy.equals(LocatorUtils.property(thisLocator, "adaptiveDRC", lhsAdaptiveDRC),
							LocatorUtils.property(thatLocator, "adaptiveDRC", rhsAdaptiveDRC), lhsAdaptiveDRC,
							rhsAdaptiveDRC)) {
						return false;
					}
				}
				return true;
			}

			public boolean equals(Object object) {
				final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
				return equals(null, null, object, strategy);
			}

			public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
				int currentHashCode = 1;
				{
					YAMAHAAV.MainZone.SoundVideo.Tone theTone;
					theTone = this.getTone();
					currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tone", theTone),
							currentHashCode, theTone);
				}
				{
					YAMAHAAV.MainZone.SoundVideo.Direct theDirect;
					theDirect = this.getDirect();
					currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "direct", theDirect),
							currentHashCode, theDirect);
				}
				{
					YAMAHAAV.MainZone.SoundVideo.HDMI theHDMI;
					theHDMI = this.getHDMI();
					currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hdmi", theHDMI),
							currentHashCode, theHDMI);
				}
				{
					String theAdaptiveDRC;
					theAdaptiveDRC = this.getAdaptiveDRC();
					currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "adaptiveDRC", theAdaptiveDRC),
							currentHashCode, theAdaptiveDRC);
				}
				return currentHashCode;
			}

			public int hashCode() {
				final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
				return this.hashCode(null, strategy);
			}

			public Object clone() {
				return copyTo(createNewInstance());
			}

			public Object copyTo(Object target) {
				final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
				return copyTo(null, target, strategy);
			}

			public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
				final Object draftCopy = ((target == null) ? createNewInstance() : target);
				if (draftCopy instanceof YAMAHAAV.MainZone.SoundVideo) {
					final YAMAHAAV.MainZone.SoundVideo copy = ((YAMAHAAV.MainZone.SoundVideo) draftCopy);
					if (this.tone != null) {
						YAMAHAAV.MainZone.SoundVideo.Tone sourceTone;
						sourceTone = this.getTone();
						YAMAHAAV.MainZone.SoundVideo.Tone copyTone = ((YAMAHAAV.MainZone.SoundVideo.Tone) strategy
								.copy(LocatorUtils.property(locator, "tone", sourceTone), sourceTone));
						copy.setTone(copyTone);
					} else {
						copy.tone = null;
					}
					if (this.direct != null) {
						YAMAHAAV.MainZone.SoundVideo.Direct sourceDirect;
						sourceDirect = this.getDirect();
						YAMAHAAV.MainZone.SoundVideo.Direct copyDirect = ((YAMAHAAV.MainZone.SoundVideo.Direct) strategy
								.copy(LocatorUtils.property(locator, "direct", sourceDirect), sourceDirect));
						copy.setDirect(copyDirect);
					} else {
						copy.direct = null;
					}
					if (this.hdmi != null) {
						YAMAHAAV.MainZone.SoundVideo.HDMI sourceHDMI;
						sourceHDMI = this.getHDMI();
						YAMAHAAV.MainZone.SoundVideo.HDMI copyHDMI = ((YAMAHAAV.MainZone.SoundVideo.HDMI) strategy
								.copy(LocatorUtils.property(locator, "hdmi", sourceHDMI), sourceHDMI));
						copy.setHDMI(copyHDMI);
					} else {
						copy.hdmi = null;
					}
					if (this.adaptiveDRC != null) {
						String sourceAdaptiveDRC;
						sourceAdaptiveDRC = this.getAdaptiveDRC();
						String copyAdaptiveDRC = ((String) strategy.copy(
								LocatorUtils.property(locator, "adaptiveDRC", sourceAdaptiveDRC), sourceAdaptiveDRC));
						copy.setAdaptiveDRC(copyAdaptiveDRC);
					} else {
						copy.adaptiveDRC = null;
					}
				}
				return draftCopy;
			}

			public Object createNewInstance() {
				return new YAMAHAAV.MainZone.SoundVideo();
			}

			/**
			 * <p>
			 * Java class for anonymous complex type.
			 * 
			 * <p>
			 * The following schema fragment specifies the expected content
			 * contained within this class.
			 * 
			 * <pre>
			 * &lt;complexType>
			 *   &lt;complexContent>
			 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
			 *       &lt;sequence>
			 *         &lt;element name="Mode" type="{http://www.w3.org/2001/XMLSchema}string"/>
			 *       &lt;/sequence>
			 *     &lt;/restriction>
			 *   &lt;/complexContent>
			 * &lt;/complexType>
			 * </pre>
			 * 
			 * 
			 */
			@XmlAccessorType(XmlAccessType.FIELD)
			@XmlType(name = "", propOrder = { "mode" })
			public static class Direct implements Cloneable, CopyTo, Equals, HashCode, ToString {

				@XmlElement(name = "Mode", required = true)
				protected String mode;

				/**
				 * Gets the value of the mode property.
				 * 
				 * @return possible object is {@link String }
				 * 
				 */
				public String getMode() {
					return mode;
				}

				/**
				 * Sets the value of the mode property.
				 * 
				 * @param value
				 *            allowed object is {@link String }
				 * 
				 */
				public void setMode(String value) {
					this.mode = value;
				}

				public String toString() {
					YAMAHAAV yamahaav = YAMAHAAV.createRoot();
					yamahaav.getMainZone().setSoundVideo(new SoundVideo());
					yamahaav.getMainZone().getSoundVideo().setDirect(Direct.this);
					return yamahaav.toString();
				}

				public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
					strategy.appendStart(locator, this, buffer);
					appendFields(locator, buffer, strategy);
					strategy.appendEnd(locator, this, buffer);
					return buffer;
				}

				public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer,
						ToStringStrategy strategy) {
					{
						String theMode;
						theMode = this.getMode();
						strategy.appendField(locator, this, "mode", buffer, theMode);
					}
					return buffer;
				}

				public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
						EqualsStrategy strategy) {
					if (!(object instanceof YAMAHAAV.MainZone.SoundVideo.Direct)) {
						return false;
					}
					if (this == object) {
						return true;
					}
					final YAMAHAAV.MainZone.SoundVideo.Direct that = ((YAMAHAAV.MainZone.SoundVideo.Direct) object);
					{
						String lhsMode;
						lhsMode = this.getMode();
						String rhsMode;
						rhsMode = that.getMode();
						if (!strategy.equals(LocatorUtils.property(thisLocator, "mode", lhsMode),
								LocatorUtils.property(thatLocator, "mode", rhsMode), lhsMode, rhsMode)) {
							return false;
						}
					}
					return true;
				}

				public boolean equals(Object object) {
					final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
					return equals(null, null, object, strategy);
				}

				public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
					int currentHashCode = 1;
					{
						String theMode;
						theMode = this.getMode();
						currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mode", theMode),
								currentHashCode, theMode);
					}
					return currentHashCode;
				}

				public int hashCode() {
					final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
					return this.hashCode(null, strategy);
				}

				public Object clone() {
					return copyTo(createNewInstance());
				}

				public Object copyTo(Object target) {
					final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
					return copyTo(null, target, strategy);
				}

				public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
					final Object draftCopy = ((target == null) ? createNewInstance() : target);
					if (draftCopy instanceof YAMAHAAV.MainZone.SoundVideo.Direct) {
						final YAMAHAAV.MainZone.SoundVideo.Direct copy = ((YAMAHAAV.MainZone.SoundVideo.Direct) draftCopy);
						if (this.mode != null) {
							String sourceMode;
							sourceMode = this.getMode();
							String copyMode = ((String) strategy
									.copy(LocatorUtils.property(locator, "mode", sourceMode), sourceMode));
							copy.setMode(copyMode);
						} else {
							copy.mode = null;
						}
					}
					return draftCopy;
				}

				public Object createNewInstance() {
					return new YAMAHAAV.MainZone.SoundVideo.Direct();
				}

			}

			/**
			 * <p>
			 * Java class for anonymous complex type.
			 * 
			 * <p>
			 * The following schema fragment specifies the expected content
			 * contained within this class.
			 * 
			 * <pre>
			 * &lt;complexType>
			 *   &lt;complexContent>
			 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
			 *       &lt;sequence>
			 *         &lt;element name="Standby_Through_Info" type="{http://www.w3.org/2001/XMLSchema}string"/>
			 *         &lt;element name="Output">
			 *           &lt;complexType>
			 *             &lt;complexContent>
			 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
			 *                 &lt;sequence>
			 *                   &lt;element name="OUT_1" type="{http://www.w3.org/2001/XMLSchema}string"/>
			 *                 &lt;/sequence>
			 *               &lt;/restriction>
			 *             &lt;/complexContent>
			 *           &lt;/complexType>
			 *         &lt;/element>
			 *       &lt;/sequence>
			 *     &lt;/restriction>
			 *   &lt;/complexContent>
			 * &lt;/complexType>
			 * </pre>
			 * 
			 * 
			 */
			@XmlAccessorType(XmlAccessType.FIELD)
			@XmlType(name = "", propOrder = { "standbyThroughInfo", "output" })
			public static class HDMI implements Cloneable, CopyTo, Equals, HashCode, ToString {

				@XmlElement(name = "Standby_Through_Info", required = true)
				protected String standbyThroughInfo;
				@XmlElement(name = "Output", required = true)
				protected YAMAHAAV.MainZone.SoundVideo.HDMI.Output output;

				/**
				 * Gets the value of the standbyThroughInfo property.
				 * 
				 * @return possible object is {@link String }
				 * 
				 */
				public String getStandbyThroughInfo() {
					return standbyThroughInfo;
				}

				/**
				 * Sets the value of the standbyThroughInfo property.
				 * 
				 * @param value
				 *            allowed object is {@link String }
				 * 
				 */
				public void setStandbyThroughInfo(String value) {
					this.standbyThroughInfo = value;
				}

				/**
				 * Gets the value of the output property.
				 * 
				 * @return possible object is
				 *         {@link YAMAHAAV.MainZone.SoundVideo.HDMI.Output }
				 * 
				 */
				public YAMAHAAV.MainZone.SoundVideo.HDMI.Output getOutput() {
					return output;
				}

				/**
				 * Sets the value of the output property.
				 * 
				 * @param value
				 *            allowed object is
				 *            {@link YAMAHAAV.MainZone.SoundVideo.HDMI.Output }
				 * 
				 */
				public void setOutput(YAMAHAAV.MainZone.SoundVideo.HDMI.Output value) {
					this.output = value;
				}

				public String toString() {
					YAMAHAAV yamahaav = YAMAHAAV.createRoot();
					yamahaav.getMainZone().setSoundVideo(new SoundVideo());
					yamahaav.getMainZone().getSoundVideo().setHDMI(HDMI.this);
					return yamahaav.toString();
				}

				public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
					strategy.appendStart(locator, this, buffer);
					appendFields(locator, buffer, strategy);
					strategy.appendEnd(locator, this, buffer);
					return buffer;
				}

				public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer,
						ToStringStrategy strategy) {
					{
						String theStandbyThroughInfo;
						theStandbyThroughInfo = this.getStandbyThroughInfo();
						strategy.appendField(locator, this, "standbyThroughInfo", buffer, theStandbyThroughInfo);
					}
					{
						YAMAHAAV.MainZone.SoundVideo.HDMI.Output theOutput;
						theOutput = this.getOutput();
						strategy.appendField(locator, this, "output", buffer, theOutput);
					}
					return buffer;
				}

				public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
						EqualsStrategy strategy) {
					if (!(object instanceof YAMAHAAV.MainZone.SoundVideo.HDMI)) {
						return false;
					}
					if (this == object) {
						return true;
					}
					final YAMAHAAV.MainZone.SoundVideo.HDMI that = ((YAMAHAAV.MainZone.SoundVideo.HDMI) object);
					{
						String lhsStandbyThroughInfo;
						lhsStandbyThroughInfo = this.getStandbyThroughInfo();
						String rhsStandbyThroughInfo;
						rhsStandbyThroughInfo = that.getStandbyThroughInfo();
						if (!strategy.equals(
								LocatorUtils.property(thisLocator, "standbyThroughInfo", lhsStandbyThroughInfo),
								LocatorUtils.property(thatLocator, "standbyThroughInfo", rhsStandbyThroughInfo),
								lhsStandbyThroughInfo, rhsStandbyThroughInfo)) {
							return false;
						}
					}
					{
						YAMAHAAV.MainZone.SoundVideo.HDMI.Output lhsOutput;
						lhsOutput = this.getOutput();
						YAMAHAAV.MainZone.SoundVideo.HDMI.Output rhsOutput;
						rhsOutput = that.getOutput();
						if (!strategy.equals(LocatorUtils.property(thisLocator, "output", lhsOutput),
								LocatorUtils.property(thatLocator, "output", rhsOutput), lhsOutput, rhsOutput)) {
							return false;
						}
					}
					return true;
				}

				public boolean equals(Object object) {
					final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
					return equals(null, null, object, strategy);
				}

				public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
					int currentHashCode = 1;
					{
						String theStandbyThroughInfo;
						theStandbyThroughInfo = this.getStandbyThroughInfo();
						currentHashCode = strategy.hashCode(
								LocatorUtils.property(locator, "standbyThroughInfo", theStandbyThroughInfo),
								currentHashCode, theStandbyThroughInfo);
					}
					{
						YAMAHAAV.MainZone.SoundVideo.HDMI.Output theOutput;
						theOutput = this.getOutput();
						currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "output", theOutput),
								currentHashCode, theOutput);
					}
					return currentHashCode;
				}

				public int hashCode() {
					final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
					return this.hashCode(null, strategy);
				}

				public Object clone() {
					return copyTo(createNewInstance());
				}

				public Object copyTo(Object target) {
					final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
					return copyTo(null, target, strategy);
				}

				public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
					final Object draftCopy = ((target == null) ? createNewInstance() : target);
					if (draftCopy instanceof YAMAHAAV.MainZone.SoundVideo.HDMI) {
						final YAMAHAAV.MainZone.SoundVideo.HDMI copy = ((YAMAHAAV.MainZone.SoundVideo.HDMI) draftCopy);
						if (this.standbyThroughInfo != null) {
							String sourceStandbyThroughInfo;
							sourceStandbyThroughInfo = this.getStandbyThroughInfo();
							String copyStandbyThroughInfo = ((String) strategy.copy(
									LocatorUtils.property(locator, "standbyThroughInfo", sourceStandbyThroughInfo),
									sourceStandbyThroughInfo));
							copy.setStandbyThroughInfo(copyStandbyThroughInfo);
						} else {
							copy.standbyThroughInfo = null;
						}
						if (this.output != null) {
							YAMAHAAV.MainZone.SoundVideo.HDMI.Output sourceOutput;
							sourceOutput = this.getOutput();
							YAMAHAAV.MainZone.SoundVideo.HDMI.Output copyOutput = ((YAMAHAAV.MainZone.SoundVideo.HDMI.Output) strategy
									.copy(LocatorUtils.property(locator, "output", sourceOutput), sourceOutput));
							copy.setOutput(copyOutput);
						} else {
							copy.output = null;
						}
					}
					return draftCopy;
				}

				public Object createNewInstance() {
					return new YAMAHAAV.MainZone.SoundVideo.HDMI();
				}

				/**
				 * <p>
				 * Java class for anonymous complex type.
				 * 
				 * <p>
				 * The following schema fragment specifies the expected content
				 * contained within this class.
				 * 
				 * <pre>
				 * &lt;complexType>
				 *   &lt;complexContent>
				 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
				 *       &lt;sequence>
				 *         &lt;element name="OUT_1" type="{http://www.w3.org/2001/XMLSchema}string"/>
				 *       &lt;/sequence>
				 *     &lt;/restriction>
				 *   &lt;/complexContent>
				 * &lt;/complexType>
				 * </pre>
				 * 
				 * 
				 */
				@XmlAccessorType(XmlAccessType.FIELD)
				@XmlType(name = "", propOrder = { "out1" })
				public static class Output implements Cloneable, CopyTo, Equals, HashCode, ToString {

					@XmlElement(name = "OUT_1", required = true)
					protected String out1;

					/**
					 * Gets the value of the out1 property.
					 * 
					 * @return possible object is {@link String }
					 * 
					 */
					public String getOUT1() {
						return out1;
					}

					/**
					 * Sets the value of the out1 property.
					 * 
					 * @param value
					 *            allowed object is {@link String }
					 * 
					 */
					public void setOUT1(String value) {
						this.out1 = value;
					}

					public String toString() {
						YAMAHAAV yamahaav = YAMAHAAV.createRoot();
						yamahaav.getMainZone().setSoundVideo(new SoundVideo());
						yamahaav.getMainZone().getSoundVideo().setHDMI(new HDMI());
						yamahaav.getMainZone().getSoundVideo().getHDMI().setOutput(Output.this);
						return yamahaav.toString();
					}

					public StringBuilder append(ObjectLocator locator, StringBuilder buffer,
							ToStringStrategy strategy) {
						strategy.appendStart(locator, this, buffer);
						appendFields(locator, buffer, strategy);
						strategy.appendEnd(locator, this, buffer);
						return buffer;
					}

					public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer,
							ToStringStrategy strategy) {
						{
							String theOUT1;
							theOUT1 = this.getOUT1();
							strategy.appendField(locator, this, "out1", buffer, theOUT1);
						}
						return buffer;
					}

					public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
							EqualsStrategy strategy) {
						if (!(object instanceof YAMAHAAV.MainZone.SoundVideo.HDMI.Output)) {
							return false;
						}
						if (this == object) {
							return true;
						}
						final YAMAHAAV.MainZone.SoundVideo.HDMI.Output that = ((YAMAHAAV.MainZone.SoundVideo.HDMI.Output) object);
						{
							String lhsOUT1;
							lhsOUT1 = this.getOUT1();
							String rhsOUT1;
							rhsOUT1 = that.getOUT1();
							if (!strategy.equals(LocatorUtils.property(thisLocator, "out1", lhsOUT1),
									LocatorUtils.property(thatLocator, "out1", rhsOUT1), lhsOUT1, rhsOUT1)) {
								return false;
							}
						}
						return true;
					}

					public boolean equals(Object object) {
						final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
						return equals(null, null, object, strategy);
					}

					public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
						int currentHashCode = 1;
						{
							String theOUT1;
							theOUT1 = this.getOUT1();
							currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "out1", theOUT1),
									currentHashCode, theOUT1);
						}
						return currentHashCode;
					}

					public int hashCode() {
						final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
						return this.hashCode(null, strategy);
					}

					public Object clone() {
						return copyTo(createNewInstance());
					}

					public Object copyTo(Object target) {
						final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
						return copyTo(null, target, strategy);
					}

					public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
						final Object draftCopy = ((target == null) ? createNewInstance() : target);
						if (draftCopy instanceof YAMAHAAV.MainZone.SoundVideo.HDMI.Output) {
							final YAMAHAAV.MainZone.SoundVideo.HDMI.Output copy = ((YAMAHAAV.MainZone.SoundVideo.HDMI.Output) draftCopy);
							if (this.out1 != null) {
								String sourceOUT1;
								sourceOUT1 = this.getOUT1();
								String copyOUT1 = ((String) strategy
										.copy(LocatorUtils.property(locator, "out1", sourceOUT1), sourceOUT1));
								copy.setOUT1(copyOUT1);
							} else {
								copy.out1 = null;
							}
						}
						return draftCopy;
					}

					public Object createNewInstance() {
						return new YAMAHAAV.MainZone.SoundVideo.HDMI.Output();
					}

				}

			}

			/**
			 * <p>
			 * Java class for anonymous complex type.
			 * 
			 * <p>
			 * The following schema fragment specifies the expected content
			 * contained within this class.
			 * 
			 * <pre>
			 * &lt;complexType>
			 *   &lt;complexContent>
			 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
			 *       &lt;sequence>
			 *         &lt;element name="Bass">
			 *           &lt;complexType>
			 *             &lt;complexContent>
			 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
			 *                 &lt;sequence>
			 *                   &lt;element name="Val" type="{http://www.w3.org/2001/XMLSchema}byte"/>
			 *                   &lt;element name="Exp" type="{http://www.w3.org/2001/XMLSchema}byte"/>
			 *                   &lt;element name="Unit" type="{http://www.w3.org/2001/XMLSchema}string"/>
			 *                 &lt;/sequence>
			 *               &lt;/restriction>
			 *             &lt;/complexContent>
			 *           &lt;/complexType>
			 *         &lt;/element>
			 *         &lt;element name="Treble">
			 *           &lt;complexType>
			 *             &lt;complexContent>
			 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
			 *                 &lt;sequence>
			 *                   &lt;element name="Val" type="{http://www.w3.org/2001/XMLSchema}byte"/>
			 *                   &lt;element name="Exp" type="{http://www.w3.org/2001/XMLSchema}byte"/>
			 *                   &lt;element name="Unit" type="{http://www.w3.org/2001/XMLSchema}string"/>
			 *                 &lt;/sequence>
			 *               &lt;/restriction>
			 *             &lt;/complexContent>
			 *           &lt;/complexType>
			 *         &lt;/element>
			 *       &lt;/sequence>
			 *     &lt;/restriction>
			 *   &lt;/complexContent>
			 * &lt;/complexType>
			 * </pre>
			 * 
			 * 
			 */
			@XmlAccessorType(XmlAccessType.FIELD)
			@XmlType(name = "", propOrder = { "bass", "treble" })
			public static class Tone implements Cloneable, CopyTo, Equals, HashCode, ToString {

				@XmlElement(name = "Bass", required = true)
				protected YAMAHAAV.MainZone.SoundVideo.Tone.Bass bass;
				@XmlElement(name = "Treble", required = true)
				protected YAMAHAAV.MainZone.SoundVideo.Tone.Treble treble;

				/**
				 * Gets the value of the bass property.
				 * 
				 * @return possible object is
				 *         {@link YAMAHAAV.MainZone.SoundVideo.Tone.Bass }
				 * 
				 */
				public YAMAHAAV.MainZone.SoundVideo.Tone.Bass getBass() {
					return bass;
				}

				/**
				 * Sets the value of the bass property.
				 * 
				 * @param value
				 *            allowed object is
				 *            {@link YAMAHAAV.MainZone.SoundVideo.Tone.Bass }
				 * 
				 */
				public void setBass(YAMAHAAV.MainZone.SoundVideo.Tone.Bass value) {
					this.bass = value;
				}

				/**
				 * Gets the value of the treble property.
				 * 
				 * @return possible object is
				 *         {@link YAMAHAAV.MainZone.SoundVideo.Tone.Treble }
				 * 
				 */
				public YAMAHAAV.MainZone.SoundVideo.Tone.Treble getTreble() {
					return treble;
				}

				/**
				 * Sets the value of the treble property.
				 * 
				 * @param value
				 *            allowed object is
				 *            {@link YAMAHAAV.MainZone.SoundVideo.Tone.Treble }
				 * 
				 */
				public void setTreble(YAMAHAAV.MainZone.SoundVideo.Tone.Treble value) {
					this.treble = value;
				}

				public String toString() {
					final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
					final StringBuilder buffer = new StringBuilder();
					append(null, buffer, strategy);
					return buffer.toString();
				}

				public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
					strategy.appendStart(locator, this, buffer);
					appendFields(locator, buffer, strategy);
					strategy.appendEnd(locator, this, buffer);
					return buffer;
				}

				public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer,
						ToStringStrategy strategy) {
					{
						YAMAHAAV.MainZone.SoundVideo.Tone.Bass theBass;
						theBass = this.getBass();
						strategy.appendField(locator, this, "bass", buffer, theBass);
					}
					{
						YAMAHAAV.MainZone.SoundVideo.Tone.Treble theTreble;
						theTreble = this.getTreble();
						strategy.appendField(locator, this, "treble", buffer, theTreble);
					}
					return buffer;
				}

				public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
						EqualsStrategy strategy) {
					if (!(object instanceof YAMAHAAV.MainZone.SoundVideo.Tone)) {
						return false;
					}
					if (this == object) {
						return true;
					}
					final YAMAHAAV.MainZone.SoundVideo.Tone that = ((YAMAHAAV.MainZone.SoundVideo.Tone) object);
					{
						YAMAHAAV.MainZone.SoundVideo.Tone.Bass lhsBass;
						lhsBass = this.getBass();
						YAMAHAAV.MainZone.SoundVideo.Tone.Bass rhsBass;
						rhsBass = that.getBass();
						if (!strategy.equals(LocatorUtils.property(thisLocator, "bass", lhsBass),
								LocatorUtils.property(thatLocator, "bass", rhsBass), lhsBass, rhsBass)) {
							return false;
						}
					}
					{
						YAMAHAAV.MainZone.SoundVideo.Tone.Treble lhsTreble;
						lhsTreble = this.getTreble();
						YAMAHAAV.MainZone.SoundVideo.Tone.Treble rhsTreble;
						rhsTreble = that.getTreble();
						if (!strategy.equals(LocatorUtils.property(thisLocator, "treble", lhsTreble),
								LocatorUtils.property(thatLocator, "treble", rhsTreble), lhsTreble, rhsTreble)) {
							return false;
						}
					}
					return true;
				}

				public boolean equals(Object object) {
					final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
					return equals(null, null, object, strategy);
				}

				public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
					int currentHashCode = 1;
					{
						YAMAHAAV.MainZone.SoundVideo.Tone.Bass theBass;
						theBass = this.getBass();
						currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bass", theBass),
								currentHashCode, theBass);
					}
					{
						YAMAHAAV.MainZone.SoundVideo.Tone.Treble theTreble;
						theTreble = this.getTreble();
						currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "treble", theTreble),
								currentHashCode, theTreble);
					}
					return currentHashCode;
				}

				public int hashCode() {
					final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
					return this.hashCode(null, strategy);
				}

				public Object clone() {
					return copyTo(createNewInstance());
				}

				public Object copyTo(Object target) {
					final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
					return copyTo(null, target, strategy);
				}

				public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
					final Object draftCopy = ((target == null) ? createNewInstance() : target);
					if (draftCopy instanceof YAMAHAAV.MainZone.SoundVideo.Tone) {
						final YAMAHAAV.MainZone.SoundVideo.Tone copy = ((YAMAHAAV.MainZone.SoundVideo.Tone) draftCopy);
						if (this.bass != null) {
							YAMAHAAV.MainZone.SoundVideo.Tone.Bass sourceBass;
							sourceBass = this.getBass();
							YAMAHAAV.MainZone.SoundVideo.Tone.Bass copyBass = ((YAMAHAAV.MainZone.SoundVideo.Tone.Bass) strategy
									.copy(LocatorUtils.property(locator, "bass", sourceBass), sourceBass));
							copy.setBass(copyBass);
						} else {
							copy.bass = null;
						}
						if (this.treble != null) {
							YAMAHAAV.MainZone.SoundVideo.Tone.Treble sourceTreble;
							sourceTreble = this.getTreble();
							YAMAHAAV.MainZone.SoundVideo.Tone.Treble copyTreble = ((YAMAHAAV.MainZone.SoundVideo.Tone.Treble) strategy
									.copy(LocatorUtils.property(locator, "treble", sourceTreble), sourceTreble));
							copy.setTreble(copyTreble);
						} else {
							copy.treble = null;
						}
					}
					return draftCopy;
				}

				public Object createNewInstance() {
					return new YAMAHAAV.MainZone.SoundVideo.Tone();
				}

				/**
				 * <p>
				 * Java class for anonymous complex type.
				 * 
				 * <p>
				 * The following schema fragment specifies the expected content
				 * contained within this class.
				 * 
				 * <pre>
				 * &lt;complexType>
				 *   &lt;complexContent>
				 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
				 *       &lt;sequence>
				 *         &lt;element name="Val" type="{http://www.w3.org/2001/XMLSchema}byte"/>
				 *         &lt;element name="Exp" type="{http://www.w3.org/2001/XMLSchema}byte"/>
				 *         &lt;element name="Unit" type="{http://www.w3.org/2001/XMLSchema}string"/>
				 *       &lt;/sequence>
				 *     &lt;/restriction>
				 *   &lt;/complexContent>
				 * &lt;/complexType>
				 * </pre>
				 * 
				 * 
				 */
				@XmlAccessorType(XmlAccessType.FIELD)
				@XmlType(name = "", propOrder = { "val", "exp", "unit" })
				public static class Bass implements Cloneable, CopyTo, Equals, HashCode, ToString {

					@XmlElement(name = "Val")
					protected byte val;
					@XmlElement(name = "Exp")
					protected byte exp;
					@XmlElement(name = "Unit", required = true)
					protected String unit;

					/**
					 * Gets the value of the val property.
					 * 
					 */
					public byte getVal() {
						return val;
					}

					/**
					 * Sets the value of the val property.
					 * 
					 */
					public void setVal(byte value) {
						this.val = value;
					}

					/**
					 * Gets the value of the exp property.
					 * 
					 */
					public byte getExp() {
						return exp;
					}

					/**
					 * Sets the value of the exp property.
					 **/ 
					 
					public void setExp(byte value) {
						this.exp = value;
					}

					/**
					 * Gets the value of the unit property.
					 * 
					 * @return possible object is {@link String }
					 * 
					 */
					public String getUnit() {
						return unit;
					}

					/**
					 * Sets the value of the unit property.
					 * 
					 * @param value
					 *            allowed object is {@link String }
					 **/
					 
					private void setUnit(String value) {
						this.unit = value;
					}

					public String toString() {
						YAMAHAAV yamahaav = YAMAHAAV.createRoot();
						yamahaav.getMainZone().setSoundVideo(new SoundVideo());
						yamahaav.getMainZone().getSoundVideo().setTone(new Tone());
						yamahaav.getMainZone().getSoundVideo().getTone().setBass(Bass.this);
						return yamahaav.toString();
					}

					public StringBuilder append(ObjectLocator locator, StringBuilder buffer,
							ToStringStrategy strategy) {
						strategy.appendStart(locator, this, buffer);
						appendFields(locator, buffer, strategy);
						strategy.appendEnd(locator, this, buffer);
						return buffer;
					}

					public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer,
							ToStringStrategy strategy) {
						{
							byte theVal;
							theVal = this.getVal();
							strategy.appendField(locator, this, "val", buffer, theVal);
						}
						{
							byte theExp;
							theExp = this.getExp();
							strategy.appendField(locator, this, "exp", buffer, theExp);
						}
						{
							String theUnit;
							theUnit = this.getUnit();
							strategy.appendField(locator, this, "unit", buffer, theUnit);
						}
						return buffer;
					}

					public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
							EqualsStrategy strategy) {
						if (!(object instanceof YAMAHAAV.MainZone.SoundVideo.Tone.Bass)) {
							return false;
						}
						if (this == object) {
							return true;
						}
						final YAMAHAAV.MainZone.SoundVideo.Tone.Bass that = ((YAMAHAAV.MainZone.SoundVideo.Tone.Bass) object);
						{
							byte lhsVal;
							lhsVal = (true ? this.getVal() : 0);
							byte rhsVal;
							rhsVal = (true ? that.getVal() : 0);
							if (!strategy.equals(LocatorUtils.property(thisLocator, "val", lhsVal),
									LocatorUtils.property(thatLocator, "val", rhsVal), lhsVal, rhsVal)) {
								return false;
							}
						}
						{
							byte lhsExp;
							lhsExp = (true ? this.getExp() : 0);
							byte rhsExp;
							rhsExp = (true ? that.getExp() : 0);
							if (!strategy.equals(LocatorUtils.property(thisLocator, "exp", lhsExp),
									LocatorUtils.property(thatLocator, "exp", rhsExp), lhsExp, rhsExp)) {
								return false;
							}
						}
						{
							String lhsUnit;
							lhsUnit = this.getUnit();
							String rhsUnit;
							rhsUnit = that.getUnit();
							if (!strategy.equals(LocatorUtils.property(thisLocator, "unit", lhsUnit),
									LocatorUtils.property(thatLocator, "unit", rhsUnit), lhsUnit, rhsUnit)) {
								return false;
							}
						}
						return true;
					}

					public boolean equals(Object object) {
						final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
						return equals(null, null, object, strategy);
					}

					public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
						int currentHashCode = 1;
						{
							byte theVal;
							theVal = this.getVal();
							currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "val", theVal),
									currentHashCode, theVal);
						}
						{
							byte theExp;
							theExp = (true ? this.getExp() : 0);
							currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "exp", theExp),
									currentHashCode, theExp);
						}
						{
							String theUnit;
							theUnit = this.getUnit();
							currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "unit", theUnit),
									currentHashCode, theUnit);
						}
						return currentHashCode;
					}

					public int hashCode() {
						final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
						return this.hashCode(null, strategy);
					}

					public Object clone() {
						return copyTo(createNewInstance());
					}

					public Object copyTo(Object target) {
						final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
						return copyTo(null, target, strategy);
					}

					public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
						final Object draftCopy = ((target == null) ? createNewInstance() : target);
						if (draftCopy instanceof YAMAHAAV.MainZone.SoundVideo.Tone.Bass) {
							final YAMAHAAV.MainZone.SoundVideo.Tone.Bass copy = ((YAMAHAAV.MainZone.SoundVideo.Tone.Bass) draftCopy);
							byte sourceVal;
							sourceVal = (true ? this.getVal() : 0);
							byte copyVal = strategy.copy(LocatorUtils.property(locator, "val", sourceVal), sourceVal);
							copy.setVal(copyVal);
							byte sourceExp;
							sourceExp = (true ? this.getExp() : 0);
							byte copyExp = strategy.copy(LocatorUtils.property(locator, "exp", sourceExp), sourceExp);
							copy.setExp(copyExp);
							if (this.unit != null) {
								String sourceUnit;
								sourceUnit = this.getUnit();
								String copyUnit = ((String) strategy
										.copy(LocatorUtils.property(locator, "unit", sourceUnit), sourceUnit));
							copy.setUnit(copyUnit);
							} else {
								copy.unit = null;
							}
						}
						return draftCopy;
					}

					public Object createNewInstance() {
						return new YAMAHAAV.MainZone.SoundVideo.Tone.Bass();
					}

				}

				/**
				 * <p>
				 * Java class for anonymous complex type.
				 * 
				 * <p>
				 * The following schema fragment specifies the expected content
				 * contained within this class.
				 * 
				 * <pre>
				 * &lt;complexType>
				 *   &lt;complexContent>
				 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
				 *       &lt;sequence>
				 *         &lt;element name="Val" type="{http://www.w3.org/2001/XMLSchema}byte"/>
				 *         &lt;element name="Exp" type="{http://www.w3.org/2001/XMLSchema}byte"/>
				 *         &lt;element name="Unit" type="{http://www.w3.org/2001/XMLSchema}string"/>
				 *       &lt;/sequence>
				 *     &lt;/restriction>
				 *   &lt;/complexContent>
				 * &lt;/complexType>
				 * </pre>
				 * 
				 * 
				 */
				@XmlAccessorType(XmlAccessType.FIELD)
				@XmlType(name = "", propOrder = { "val", "exp", "unit" })
				public static class Treble implements Cloneable, CopyTo, Equals, HashCode, ToString {

					@XmlElement(name = "Val")
					protected byte val;
					@XmlElement(name = "Exp")
					protected byte exp;
					@XmlElement(name = "Unit", required = true)
					protected String unit;

					/**
					 * Gets the value of the val property.
					 * 
					 */
					public byte getVal() {
						return val;
					}

					/**
					 * Sets the value of the val property.
					 * 
					 */
					public void setVal(byte value) {
						this.val = value;
					}

					/**
					 * Gets the value of the exp property.
					 * 
					 */
					public byte getExp() {
						return exp;
					}

					/**
					 * Sets the value of the exp property.
					 **/ 
					 
					private void setExp(byte value) {
						this.exp = value;
					}

					/**
					 * Gets the value of the unit property.
					 * 
					 * @return possible object is {@link String }
					 * */
					 
					public String getUnit() {
						return unit;
					}

					/**
					 * Sets the value of the unit property.
					 * 
					 * @param value
					 *            allowed object is {@link String }
					 **/ 
					 
					private void setUnit(String value) {
						this.unit = value;
					}

					public String toString() {
						YAMAHAAV yamahaav = YAMAHAAV.createRoot();
						yamahaav.getMainZone().setSoundVideo(new SoundVideo());
						yamahaav.getMainZone().getSoundVideo().setTone(new Tone());
						yamahaav.getMainZone().getSoundVideo().getTone().setTreble(Treble.this);
						return yamahaav.toString();
					}

					public StringBuilder append(ObjectLocator locator, StringBuilder buffer,
							ToStringStrategy strategy) {
						strategy.appendStart(locator, this, buffer);
						appendFields(locator, buffer, strategy);
						strategy.appendEnd(locator, this, buffer);
						return buffer;
					}

					public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer,
							ToStringStrategy strategy) {
						{
							byte theVal;
							theVal = (true ? this.getVal() : 0);
							strategy.appendField(locator, this, "val", buffer, theVal);
						}
						{
							byte theExp;
							theExp = (true ? this.getExp() : 0);
							strategy.appendField(locator, this, "exp", buffer, theExp);
						}
						{
							String theUnit;
							theUnit = this.getUnit();
							strategy.appendField(locator, this, "unit", buffer, theUnit);
						}
						return buffer;
					}

					public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
							EqualsStrategy strategy) {
						if (!(object instanceof YAMAHAAV.MainZone.SoundVideo.Tone.Treble)) {
							return false;
						}
						if (this == object) {
							return true;
						}
						final YAMAHAAV.MainZone.SoundVideo.Tone.Treble that = ((YAMAHAAV.MainZone.SoundVideo.Tone.Treble) object);
						{
							byte lhsVal;
							lhsVal = (true ? this.getVal() : 0);
							byte rhsVal;
							rhsVal = (true ? that.getVal() : 0);
							if (!strategy.equals(LocatorUtils.property(thisLocator, "val", lhsVal),
									LocatorUtils.property(thatLocator, "val", rhsVal), lhsVal, rhsVal)) {
								return false;
							}
						}
						{
							byte lhsExp;
							lhsExp = (true ? this.getExp() : 0);
							byte rhsExp;
							rhsExp = (true ? that.getExp() : 0);
							if (!strategy.equals(LocatorUtils.property(thisLocator, "exp", lhsExp),
									LocatorUtils.property(thatLocator, "exp", rhsExp), lhsExp, rhsExp)) {
								return false;
							}
						}
						{
							String lhsUnit;
							lhsUnit = this.getUnit();
							String rhsUnit;
							rhsUnit = that.getUnit();
							if (!strategy.equals(LocatorUtils.property(thisLocator, "unit", lhsUnit),
									LocatorUtils.property(thatLocator, "unit", rhsUnit), lhsUnit, rhsUnit)) {
								return false;
							}
						}
						return true;
					}

					public boolean equals(Object object) {
						final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
						return equals(null, null, object, strategy);
					}

					public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
						int currentHashCode = 1;
						{
							byte theVal;
							theVal = (true ? this.getVal() : 0);
							currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "val", theVal),
									currentHashCode, theVal);
						}
						{
							byte theExp;
							theExp = (true ? this.getExp() : 0);
							currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "exp", theExp),
									currentHashCode, theExp);
						}
						{
							String theUnit;
							theUnit = this.getUnit();
							currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "unit", theUnit),
									currentHashCode, theUnit);
						}
						return currentHashCode;
					}

					public int hashCode() {
						final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
						return this.hashCode(null, strategy);
					}

					public Object clone() {
						return copyTo(createNewInstance());
					}

					public Object copyTo(Object target) {
						final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
						return copyTo(null, target, strategy);
					}

					public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
						final Object draftCopy = ((target == null) ? createNewInstance() : target);
						if (draftCopy instanceof YAMAHAAV.MainZone.SoundVideo.Tone.Treble) {
							final YAMAHAAV.MainZone.SoundVideo.Tone.Treble copy = ((YAMAHAAV.MainZone.SoundVideo.Tone.Treble) draftCopy);
							byte sourceVal;
							sourceVal = (true ? this.getVal() : 0);
							byte copyVal = strategy.copy(LocatorUtils.property(locator, "val", sourceVal), sourceVal);
							copy.setVal(copyVal);
							byte sourceExp;
							sourceExp = (true ? this.getExp() : 0);
							byte copyExp = strategy.copy(LocatorUtils.property(locator, "exp", sourceExp), sourceExp);
							copy.setExp(copyExp);
							if (this.unit != null) {
								String sourceUnit;
								sourceUnit = this.getUnit();
								String copyUnit = ((String) strategy
										.copy(LocatorUtils.property(locator, "unit", sourceUnit), sourceUnit));
								copy.setUnit(copyUnit);
							} else {
								copy.unit = null;
							}
						}
						return draftCopy;
					}

					public Object createNewInstance() {
						return new YAMAHAAV.MainZone.SoundVideo.Tone.Treble();
					}

				}

			}

		}

		/**
		 * <p>
		 * Java class for anonymous complex type.
		 * 
		 * <p>
		 * The following schema fragment specifies the expected content
		 * contained within this class.
		 * 
		 * <pre>
		 * &lt;complexType>
		 *   &lt;complexContent>
		 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
		 *       &lt;sequence>
		 *         &lt;element name="Program_Sel">
		 *           &lt;complexType>
		 *             &lt;complexContent>
		 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
		 *                 &lt;sequence>
		 *                   &lt;element name="Current">
		 *                     &lt;complexType>
		 *                       &lt;complexContent>
		 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
		 *                           &lt;sequence>
		 *                             &lt;element name="Straight" type="{http://www.w3.org/2001/XMLSchema}string"/>
		 *                             &lt;element name="Enhancer" type="{http://www.w3.org/2001/XMLSchema}string"/>
		 *                             &lt;element name="Sound_Program" type="{http://www.w3.org/2001/XMLSchema}string"/>
		 *                           &lt;/sequence>
		 *                         &lt;/restriction>
		 *                       &lt;/complexContent>
		 *                     &lt;/complexType>
		 *                   &lt;/element>
		 *                 &lt;/sequence>
		 *               &lt;/restriction>
		 *             &lt;/complexContent>
		 *           &lt;/complexType>
		 *         &lt;/element>
		 *         &lt;element name="_3D_Cinema_DSP" type="{http://www.w3.org/2001/XMLSchema}string"/>
		 *       &lt;/sequence>
		 *     &lt;/restriction>
		 *   &lt;/complexContent>
		 * &lt;/complexType>
		 * </pre>
		 * 
		 * 
		 */
		@XmlAccessorType(XmlAccessType.FIELD)
		@XmlType(name = "", propOrder = { "programSel", "_3DCinemaDSP" })
		public static class Surround implements Cloneable, CopyTo, Equals, HashCode, ToString {

			@XmlElement(name = "Program_Sel", required = true)
			protected YAMAHAAV.MainZone.Surround.ProgramSel programSel;
			@XmlElement(name = "_3D_Cinema_DSP", required = true)
			protected String _3DCinemaDSP;

			/**
			 * Gets the value of the programSel property.
			 * 
			 * @return possible object is
			 *         {@link YAMAHAAV.MainZone.Surround.ProgramSel }
			 * 
			 */
			public YAMAHAAV.MainZone.Surround.ProgramSel getProgramSel() {
				return programSel;
			}

			/**
			 * Sets the value of the programSel property.
			 * 
			 * @param value
			 *            allowed object is
			 *            {@link YAMAHAAV.MainZone.Surround.ProgramSel }
			 * 
			 */
			public void setProgramSel(YAMAHAAV.MainZone.Surround.ProgramSel value) {
				this.programSel = value;
			}

			/**
			 * Gets the value of the 3DCinemaDSP property.
			 * 
			 * @return possible object is {@link String }
			 * 
			 */
			public String get3DCinemaDSP() {
				return _3DCinemaDSP;
			}

			/**
			 * Sets the value of the 3DCinemaDSP property.
			 * 
			 * @param value
			 *            allowed object is {@link String }
			 * 
			 */
			public void set3DCinemaDSP(String value) {
				this._3DCinemaDSP = value;
			}

			public String toString() {
				YAMAHAAV yamahaav = YAMAHAAV.createRoot();
				yamahaav.getMainZone().setSurround(Surround.this);
				;
				return yamahaav.toString();
			}

			public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
				strategy.appendStart(locator, this, buffer);
				appendFields(locator, buffer, strategy);
				strategy.appendEnd(locator, this, buffer);
				return buffer;
			}

			public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
				{
					YAMAHAAV.MainZone.Surround.ProgramSel theProgramSel;
					theProgramSel = this.getProgramSel();
					strategy.appendField(locator, this, "programSel", buffer, theProgramSel);
				}
				{
					String the3DCinemaDSP;
					the3DCinemaDSP = this.get3DCinemaDSP();
					strategy.appendField(locator, this, "_3DCinemaDSP", buffer, the3DCinemaDSP);
				}
				return buffer;
			}

			public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
					EqualsStrategy strategy) {
				if (!(object instanceof YAMAHAAV.MainZone.Surround)) {
					return false;
				}
				if (this == object) {
					return true;
				}
				final YAMAHAAV.MainZone.Surround that = ((YAMAHAAV.MainZone.Surround) object);
				{
					YAMAHAAV.MainZone.Surround.ProgramSel lhsProgramSel;
					lhsProgramSel = this.getProgramSel();
					YAMAHAAV.MainZone.Surround.ProgramSel rhsProgramSel;
					rhsProgramSel = that.getProgramSel();
					if (!strategy.equals(LocatorUtils.property(thisLocator, "programSel", lhsProgramSel),
							LocatorUtils.property(thatLocator, "programSel", rhsProgramSel), lhsProgramSel,
							rhsProgramSel)) {
						return false;
					}
				}
				{
					String lhs3DCinemaDSP;
					lhs3DCinemaDSP = this.get3DCinemaDSP();
					String rhs3DCinemaDSP;
					rhs3DCinemaDSP = that.get3DCinemaDSP();
					if (!strategy.equals(LocatorUtils.property(thisLocator, "_3DCinemaDSP", lhs3DCinemaDSP),
							LocatorUtils.property(thatLocator, "_3DCinemaDSP", rhs3DCinemaDSP), lhs3DCinemaDSP,
							rhs3DCinemaDSP)) {
						return false;
					}
				}
				return true;
			}

			public boolean equals(Object object) {
				final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
				return equals(null, null, object, strategy);
			}

			public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
				int currentHashCode = 1;
				{
					YAMAHAAV.MainZone.Surround.ProgramSel theProgramSel;
					theProgramSel = this.getProgramSel();
					currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "programSel", theProgramSel),
							currentHashCode, theProgramSel);
				}
				{
					String the3DCinemaDSP;
					the3DCinemaDSP = this.get3DCinemaDSP();
					currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "_3DCinemaDSP", the3DCinemaDSP),
							currentHashCode, the3DCinemaDSP);
				}
				return currentHashCode;
			}

			public int hashCode() {
				final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
				return this.hashCode(null, strategy);
			}

			public Object clone() {
				return copyTo(createNewInstance());
			}

			public Object copyTo(Object target) {
				final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
				return copyTo(null, target, strategy);
			}

			public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
				final Object draftCopy = ((target == null) ? createNewInstance() : target);
				if (draftCopy instanceof YAMAHAAV.MainZone.Surround) {
					final YAMAHAAV.MainZone.Surround copy = ((YAMAHAAV.MainZone.Surround) draftCopy);
					if (this.programSel != null) {
						YAMAHAAV.MainZone.Surround.ProgramSel sourceProgramSel;
						sourceProgramSel = this.getProgramSel();
						YAMAHAAV.MainZone.Surround.ProgramSel copyProgramSel = ((YAMAHAAV.MainZone.Surround.ProgramSel) strategy
								.copy(LocatorUtils.property(locator, "programSel", sourceProgramSel),
										sourceProgramSel));
						copy.setProgramSel(copyProgramSel);
					} else {
						copy.programSel = null;
					}
					if (this._3DCinemaDSP != null) {
						String source3DCinemaDSP;
						source3DCinemaDSP = this.get3DCinemaDSP();
						String copy3DCinemaDSP = ((String) strategy.copy(
								LocatorUtils.property(locator, "_3DCinemaDSP", source3DCinemaDSP), source3DCinemaDSP));
						copy.set3DCinemaDSP(copy3DCinemaDSP);
					} else {
						copy._3DCinemaDSP = null;
					}
				}
				return draftCopy;
			}

			public Object createNewInstance() {
				return new YAMAHAAV.MainZone.Surround();
			}

			/**
			 * <p>
			 * Java class for anonymous complex type.
			 * 
			 * <p>
			 * The following schema fragment specifies the expected content
			 * contained within this class.
			 * 
			 * <pre>
			 * &lt;complexType>
			 *   &lt;complexContent>
			 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
			 *       &lt;sequence>
			 *         &lt;element name="Current">
			 *           &lt;complexType>
			 *             &lt;complexContent>
			 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
			 *                 &lt;sequence>
			 *                   &lt;element name="Straight" type="{http://www.w3.org/2001/XMLSchema}string"/>
			 *                   &lt;element name="Enhancer" type="{http://www.w3.org/2001/XMLSchema}string"/>
			 *                   &lt;element name="Sound_Program" type="{http://www.w3.org/2001/XMLSchema}string"/>
			 *                 &lt;/sequence>
			 *               &lt;/restriction>
			 *             &lt;/complexContent>
			 *           &lt;/complexType>
			 *         &lt;/element>
			 *       &lt;/sequence>
			 *     &lt;/restriction>
			 *   &lt;/complexContent>
			 * &lt;/complexType>
			 * </pre>
			 * 
			 * 
			 */
			@XmlAccessorType(XmlAccessType.FIELD)
			@XmlType(name = "", propOrder = { "current" })
			public static class ProgramSel implements Cloneable, CopyTo, Equals, HashCode, ToString {

				@XmlElement(name = "Current", required = true)
				protected YAMAHAAV.MainZone.Surround.ProgramSel.Current current;

				/**
				 * Gets the value of the current property.
				 * 
				 * @return possible object is
				 *         {@link YAMAHAAV.MainZone.Surround.ProgramSel.Current
				 *         }
				 * 
				 */
				public YAMAHAAV.MainZone.Surround.ProgramSel.Current getCurrent() {
					return current;
				}

				/**
				 * Sets the value of the current property.
				 * 
				 * @param value
				 *            allowed object is
				 *            {@link YAMAHAAV.MainZone.Surround.ProgramSel.Current
				 *            }
				 * 
				 */
				public void setCurrent(YAMAHAAV.MainZone.Surround.ProgramSel.Current value) {
					this.current = value;
				}

				public String toString() {
					final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
					final StringBuilder buffer = new StringBuilder();
					append(null, buffer, strategy);
					return buffer.toString();
				}

				public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
					strategy.appendStart(locator, this, buffer);
					appendFields(locator, buffer, strategy);
					strategy.appendEnd(locator, this, buffer);
					return buffer;
				}

				public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer,
						ToStringStrategy strategy) {
					{
						YAMAHAAV.MainZone.Surround.ProgramSel.Current theCurrent;
						theCurrent = this.getCurrent();
						strategy.appendField(locator, this, "current", buffer, theCurrent);
					}
					return buffer;
				}

				public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
						EqualsStrategy strategy) {
					if (!(object instanceof YAMAHAAV.MainZone.Surround.ProgramSel)) {
						return false;
					}
					if (this == object) {
						return true;
					}
					final YAMAHAAV.MainZone.Surround.ProgramSel that = ((YAMAHAAV.MainZone.Surround.ProgramSel) object);
					{
						YAMAHAAV.MainZone.Surround.ProgramSel.Current lhsCurrent;
						lhsCurrent = this.getCurrent();
						YAMAHAAV.MainZone.Surround.ProgramSel.Current rhsCurrent;
						rhsCurrent = that.getCurrent();
						if (!strategy.equals(LocatorUtils.property(thisLocator, "current", lhsCurrent),
								LocatorUtils.property(thatLocator, "current", rhsCurrent), lhsCurrent, rhsCurrent)) {
							return false;
						}
					}
					return true;
				}

				public boolean equals(Object object) {
					final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
					return equals(null, null, object, strategy);
				}

				public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
					int currentHashCode = 1;
					{
						YAMAHAAV.MainZone.Surround.ProgramSel.Current theCurrent;
						theCurrent = this.getCurrent();
						currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "current", theCurrent),
								currentHashCode, theCurrent);
					}
					return currentHashCode;
				}

				public int hashCode() {
					final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
					return this.hashCode(null, strategy);
				}

				public Object clone() {
					return copyTo(createNewInstance());
				}

				public Object copyTo(Object target) {
					final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
					return copyTo(null, target, strategy);
				}

				public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
					final Object draftCopy = ((target == null) ? createNewInstance() : target);
					if (draftCopy instanceof YAMAHAAV.MainZone.Surround.ProgramSel) {
						final YAMAHAAV.MainZone.Surround.ProgramSel copy = ((YAMAHAAV.MainZone.Surround.ProgramSel) draftCopy);
						if (this.current != null) {
							YAMAHAAV.MainZone.Surround.ProgramSel.Current sourceCurrent;
							sourceCurrent = this.getCurrent();
							YAMAHAAV.MainZone.Surround.ProgramSel.Current copyCurrent = ((YAMAHAAV.MainZone.Surround.ProgramSel.Current) strategy
									.copy(LocatorUtils.property(locator, "current", sourceCurrent), sourceCurrent));
							copy.setCurrent(copyCurrent);
						} else {
							copy.current = null;
						}
					}
					return draftCopy;
				}

				public Object createNewInstance() {
					return new YAMAHAAV.MainZone.Surround.ProgramSel();
				}

				/**
				 * <p>
				 * Java class for anonymous complex type.
				 * 
				 * <p>
				 * The following schema fragment specifies the expected content
				 * contained within this class.
				 * 
				 * <pre>
				 * &lt;complexType>
				 *   &lt;complexContent>
				 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
				 *       &lt;sequence>
				 *         &lt;element name="Straight" type="{http://www.w3.org/2001/XMLSchema}string"/>
				 *         &lt;element name="Enhancer" type="{http://www.w3.org/2001/XMLSchema}string"/>
				 *         &lt;element name="Sound_Program" type="{http://www.w3.org/2001/XMLSchema}string"/>
				 *       &lt;/sequence>
				 *     &lt;/restriction>
				 *   &lt;/complexContent>
				 * &lt;/complexType>
				 * </pre>
				 * 
				 * 
				 */
				@XmlAccessorType(XmlAccessType.FIELD)
				@XmlType(name = "", propOrder = { "straight", "enhancer", "soundProgram" })
				public static class Current implements Cloneable, CopyTo, Equals, HashCode, ToString {

					@XmlElement(name = "Straight", required = true)
					protected String straight;
					@XmlElement(name = "Enhancer", required = true)
					protected String enhancer;
					@XmlElement(name = "Sound_Program", required = true)
					protected String soundProgram;

					/**
					 * Gets the value of the straight property.
					 * 
					 * @return possible object is {@link String }
					 * 
					 */
					public String getStraight() {
						return straight;
					}

					/**
					 * Sets the value of the straight property.
					 * 
					 * @param value
					 *            allowed object is {@link String }
					 * 
					 */
					public void setStraight(String value) {
						this.straight = value;
					}

					/**
					 * Gets the value of the enhancer property.
					 * 
					 * @return possible object is {@link String }
					 * 
					 */
					public String getEnhancer() {
						return enhancer;
					}

					/**
					 * Sets the value of the enhancer property.
					 * 
					 * @param value
					 *            allowed object is {@link String }
					 * 
					 */
					public void setEnhancer(String value) {
						this.enhancer = value;
					}

					/**
					 * Gets the value of the soundProgram property.
					 * 
					 * @return possible object is {@link String }
					 * 
					 */
					public String getSoundProgram() {
						return soundProgram;
					}

					/**
					 * Sets the value of the soundProgram property.
					 * 
					 * @param value
					 *            allowed object is {@link String }
					 * 
					 */
					public void setSoundProgram(String value) {
						this.soundProgram = value;
					}

					public String toString() {
						final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
						final StringBuilder buffer = new StringBuilder();
						append(null, buffer, strategy);
						return buffer.toString();
					}

					public StringBuilder append(ObjectLocator locator, StringBuilder buffer,
							ToStringStrategy strategy) {
						strategy.appendStart(locator, this, buffer);
						appendFields(locator, buffer, strategy);
						strategy.appendEnd(locator, this, buffer);
						return buffer;
					}

					public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer,
							ToStringStrategy strategy) {
						{
							String theStraight;
							theStraight = this.getStraight();
							strategy.appendField(locator, this, "straight", buffer, theStraight);
						}
						{
							String theEnhancer;
							theEnhancer = this.getEnhancer();
							strategy.appendField(locator, this, "enhancer", buffer, theEnhancer);
						}
						{
							String theSoundProgram;
							theSoundProgram = this.getSoundProgram();
							strategy.appendField(locator, this, "soundProgram", buffer, theSoundProgram);
						}
						return buffer;
					}

					public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
							EqualsStrategy strategy) {
						if (!(object instanceof YAMAHAAV.MainZone.Surround.ProgramSel.Current)) {
							return false;
						}
						if (this == object) {
							return true;
						}
						final YAMAHAAV.MainZone.Surround.ProgramSel.Current that = ((YAMAHAAV.MainZone.Surround.ProgramSel.Current) object);
						{
							String lhsStraight;
							lhsStraight = this.getStraight();
							String rhsStraight;
							rhsStraight = that.getStraight();
							if (!strategy.equals(LocatorUtils.property(thisLocator, "straight", lhsStraight),
									LocatorUtils.property(thatLocator, "straight", rhsStraight), lhsStraight,
									rhsStraight)) {
								return false;
							}
						}
						{
							String lhsEnhancer;
							lhsEnhancer = this.getEnhancer();
							String rhsEnhancer;
							rhsEnhancer = that.getEnhancer();
							if (!strategy.equals(LocatorUtils.property(thisLocator, "enhancer", lhsEnhancer),
									LocatorUtils.property(thatLocator, "enhancer", rhsEnhancer), lhsEnhancer,
									rhsEnhancer)) {
								return false;
							}
						}
						{
							String lhsSoundProgram;
							lhsSoundProgram = this.getSoundProgram();
							String rhsSoundProgram;
							rhsSoundProgram = that.getSoundProgram();
							if (!strategy.equals(LocatorUtils.property(thisLocator, "soundProgram", lhsSoundProgram),
									LocatorUtils.property(thatLocator, "soundProgram", rhsSoundProgram),
									lhsSoundProgram, rhsSoundProgram)) {
								return false;
							}
						}
						return true;
					}

					public boolean equals(Object object) {
						final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
						return equals(null, null, object, strategy);
					}

					public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
						int currentHashCode = 1;
						{
							String theStraight;
							theStraight = this.getStraight();
							currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "straight", theStraight),
									currentHashCode, theStraight);
						}
						{
							String theEnhancer;
							theEnhancer = this.getEnhancer();
							currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "enhancer", theEnhancer),
									currentHashCode, theEnhancer);
						}
						{
							String theSoundProgram;
							theSoundProgram = this.getSoundProgram();
							currentHashCode = strategy.hashCode(
									LocatorUtils.property(locator, "soundProgram", theSoundProgram), currentHashCode,
									theSoundProgram);
						}
						return currentHashCode;
					}

					public int hashCode() {
						final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
						return this.hashCode(null, strategy);
					}

					public Object clone() {
						return copyTo(createNewInstance());
					}

					public Object copyTo(Object target) {
						final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
						return copyTo(null, target, strategy);
					}

					public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
						final Object draftCopy = ((target == null) ? createNewInstance() : target);
						if (draftCopy instanceof YAMAHAAV.MainZone.Surround.ProgramSel.Current) {
							final YAMAHAAV.MainZone.Surround.ProgramSel.Current copy = ((YAMAHAAV.MainZone.Surround.ProgramSel.Current) draftCopy);
							if (this.straight != null) {
								String sourceStraight;
								sourceStraight = this.getStraight();
								String copyStraight = ((String) strategy.copy(
										LocatorUtils.property(locator, "straight", sourceStraight), sourceStraight));
								copy.setStraight(copyStraight);
							} else {
								copy.straight = null;
							}
							if (this.enhancer != null) {
								String sourceEnhancer;
								sourceEnhancer = this.getEnhancer();
								String copyEnhancer = ((String) strategy.copy(
										LocatorUtils.property(locator, "enhancer", sourceEnhancer), sourceEnhancer));
								copy.setEnhancer(copyEnhancer);
							} else {
								copy.enhancer = null;
							}
							if (this.soundProgram != null) {
								String sourceSoundProgram;
								sourceSoundProgram = this.getSoundProgram();
								String copySoundProgram = ((String) strategy.copy(
										LocatorUtils.property(locator, "soundProgram", sourceSoundProgram),
										sourceSoundProgram));
								copy.setSoundProgram(copySoundProgram);
							} else {
								copy.soundProgram = null;
							}
						}
						return draftCopy;
					}

					public Object createNewInstance() {
						return new YAMAHAAV.MainZone.Surround.ProgramSel.Current();
					}

				}

			}

		}

		/**
		 * <p>
		 * Java class for anonymous complex type.
		 * 
		 * <p>
		 * The following schema fragment specifies the expected content
		 * contained within this class.
		 * 
		 * <pre>
		 * &lt;complexType>
		 *   &lt;complexContent>
		 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
		 *       &lt;sequence>
		 *         &lt;element name="Lvl">
		 *           &lt;complexType>
		 *             &lt;complexContent>
		 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
		 *                 &lt;sequence>
		 *                   &lt;element name="Val" type="{http://www.w3.org/2001/XMLSchema}short"/>
		 *                   &lt;element name="Exp" type="{http://www.w3.org/2001/XMLSchema}byte"/>
		 *                   &lt;element name="Unit" type="{http://www.w3.org/2001/XMLSchema}string"/>
		 *                 &lt;/sequence>
		 *               &lt;/restriction>
		 *             &lt;/complexContent>
		 *           &lt;/complexType>
		 *         &lt;/element>
		 *         &lt;element name="Mute" type="{http://www.w3.org/2001/XMLSchema}string"/>
		 *       &lt;/sequence>
		 *     &lt;/restriction>
		 *   &lt;/complexContent>
		 * &lt;/complexType>
		 * </pre>
		 * 
		 * 
		 */
		@XmlAccessorType(XmlAccessType.FIELD)
		@XmlType(name = "", propOrder = { "lvl", "mute" })
		public static class Volume implements Cloneable, CopyTo, Equals, HashCode, ToString {

			@XmlElement(name = "Lvl", required = true)
			protected YAMAHAAV.MainZone.Volume.Lvl lvl;
			@XmlElement(name = "Mute", required = true)
			protected String mute;

			/**
			 * Gets the value of the lvl property.
			 * 
			 * @return possible object is {@link YAMAHAAV.MainZone.Volume.Lvl }
			 * 
			 */
			public YAMAHAAV.MainZone.Volume.Lvl getLvl() {
				return lvl;
			}

			/**
			 * Sets the value of the lvl property.
			 * 
			 * @param value
			 *            allowed object is {@link YAMAHAAV.MainZone.Volume.Lvl
			 *            }
			 * 
			 */
			public void setLvl(YAMAHAAV.MainZone.Volume.Lvl value) {
				this.lvl = value;
			}

			/**
			 * Gets the value of the mute property.
			 * 
			 * @return possible object is {@link String }
			 * 
			 */
			public String getMute() {
				return mute;
			}

			/**
			 * Sets the value of the mute property.
			 * 
			 * @param value
			 *            allowed object is {@link String }
			 * 
			 */
			public void setMute(String value) {
				this.mute = value;
			}

			public String toString() {
				YAMAHAAV yamahaav = YAMAHAAV.createRoot();
				yamahaav.getMainZone().setVolume(Volume.this);
				;
				return yamahaav.toString();
			}

			public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
				strategy.appendStart(locator, this, buffer);
				appendFields(locator, buffer, strategy);
				strategy.appendEnd(locator, this, buffer);
				return buffer;
			}

			public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
				{
					YAMAHAAV.MainZone.Volume.Lvl theLvl;
					theLvl = this.getLvl();
					strategy.appendField(locator, this, "lvl", buffer, theLvl);
				}
				{
					String theMute;
					theMute = this.getMute();
					strategy.appendField(locator, this, "mute", buffer, theMute);
				}
				return buffer;
			}

			public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
					EqualsStrategy strategy) {
				if (!(object instanceof YAMAHAAV.MainZone.Volume)) {
					return false;
				}
				if (this == object) {
					return true;
				}
				final YAMAHAAV.MainZone.Volume that = ((YAMAHAAV.MainZone.Volume) object);
				{
					YAMAHAAV.MainZone.Volume.Lvl lhsLvl;
					lhsLvl = this.getLvl();
					YAMAHAAV.MainZone.Volume.Lvl rhsLvl;
					rhsLvl = that.getLvl();
					if (!strategy.equals(LocatorUtils.property(thisLocator, "lvl", lhsLvl),
							LocatorUtils.property(thatLocator, "lvl", rhsLvl), lhsLvl, rhsLvl)) {
						return false;
					}
				}
				{
					String lhsMute;
					lhsMute = this.getMute();
					String rhsMute;
					rhsMute = that.getMute();
					if (!strategy.equals(LocatorUtils.property(thisLocator, "mute", lhsMute),
							LocatorUtils.property(thatLocator, "mute", rhsMute), lhsMute, rhsMute)) {
						return false;
					}
				}
				return true;
			}

			public boolean equals(Object object) {
				final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
				return equals(null, null, object, strategy);
			}

			public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
				int currentHashCode = 1;
				{
					YAMAHAAV.MainZone.Volume.Lvl theLvl;
					theLvl = this.getLvl();
					currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lvl", theLvl), currentHashCode,
							theLvl);
				}
				{
					String theMute;
					theMute = this.getMute();
					currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mute", theMute),
							currentHashCode, theMute);
				}
				return currentHashCode;
			}

			public int hashCode() {
				final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
				return this.hashCode(null, strategy);
			}

			public Object clone() {
				return copyTo(createNewInstance());
			}

			public Object copyTo(Object target) {
				final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
				return copyTo(null, target, strategy);
			}

			public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
				final Object draftCopy = ((target == null) ? createNewInstance() : target);
				if (draftCopy instanceof YAMAHAAV.MainZone.Volume) {
					final YAMAHAAV.MainZone.Volume copy = ((YAMAHAAV.MainZone.Volume) draftCopy);
					if (this.lvl != null) {
						YAMAHAAV.MainZone.Volume.Lvl sourceLvl;
						sourceLvl = this.getLvl();
						YAMAHAAV.MainZone.Volume.Lvl copyLvl = ((YAMAHAAV.MainZone.Volume.Lvl) strategy
								.copy(LocatorUtils.property(locator, "lvl", sourceLvl), sourceLvl));
						copy.setLvl(copyLvl);
					} else {
						copy.lvl = null;
					}
					if (this.mute != null) {
						String sourceMute;
						sourceMute = this.getMute();
						String copyMute = ((String) strategy.copy(LocatorUtils.property(locator, "mute", sourceMute),
								sourceMute));
						copy.setMute(copyMute);
					} else {
						copy.mute = null;
					}
				}
				return draftCopy;
			}

			public Object createNewInstance() {
				return new YAMAHAAV.MainZone.Volume();
			}

			/**
			 * <p>
			 * Java class for anonymous complex type.
			 * 
			 * <p>
			 * The following schema fragment specifies the expected content
			 * contained within this class.
			 * 
			 * <pre>
			 * &lt;complexType>
			 *   &lt;complexContent>
			 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
			 *       &lt;sequence>
			 *         &lt;element name="Val" type="{http://www.w3.org/2001/XMLSchema}short"/>
			 *         &lt;element name="Exp" type="{http://www.w3.org/2001/XMLSchema}byte"/>
			 *         &lt;element name="Unit" type="{http://www.w3.org/2001/XMLSchema}string"/>
			 *       &lt;/sequence>
			 *     &lt;/restriction>
			 *   &lt;/complexContent>
			 * &lt;/complexType>
			 * </pre>
			 * 
			 * 
			 */
			@XmlAccessorType(XmlAccessType.FIELD)
			@XmlType(name = "", propOrder = { "val", "exp", "unit" })
			public static class Lvl implements Cloneable, CopyTo, Equals, HashCode, ToString {

				@XmlElement(name = "Val")
				protected int val;
				@XmlElement(name = "Exp")
				protected byte exp;
				@XmlElement(name = "Unit", required = true)
				protected String unit;

				/**
				 * Gets the value of the val property.
				 * 
				 */
				public int getVal() {
					return val;
				}

				/**
				 * Sets the value of the val property.
				 * 
				 */
				public void setVal(int value) {
					this.val = value;
				}

				/**
				 * Gets the value of the exp property.
				 * 
				 */
				public byte getExp() {
					return exp;
				}

				/**
				 * Sets the value of the exp property.
				 **/ 
				 
				private void setExp(byte value) {
					this.exp = value;
				}

				/**
				 * Gets the value of the unit property.
				 * 
				 * @return possible object is {@link String }
				 * 
				 */
				public String getUnit() {
					return unit;
				}

				/**
				 * Sets the value of the unit property.
				 * 
				 * @param value
				 *            allowed object is {@link String }
				 * */
				 
				private void setUnit(String value) {
					this.unit = value;
				}

				public String toString() {
					final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
					final StringBuilder buffer = new StringBuilder();
					append(null, buffer, strategy);
					return buffer.toString();
				}

				public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
					strategy.appendStart(locator, this, buffer);
					appendFields(locator, buffer, strategy);
					strategy.appendEnd(locator, this, buffer);
					return buffer;
				}

				public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer,
						ToStringStrategy strategy) {
					{
						int theVal;
						theVal = (true ? this.getVal() : 0);
						strategy.appendField(locator, this, "val", buffer, theVal);
					}
					{
						byte theExp;
						theExp = (true ? this.getExp() : 0);
						strategy.appendField(locator, this, "exp", buffer, theExp);
					}
					{
						String theUnit;
						theUnit = this.getUnit();
						strategy.appendField(locator, this, "unit", buffer, theUnit);
					}
					return buffer;
				}

				public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object,
						EqualsStrategy strategy) {
					if (!(object instanceof YAMAHAAV.MainZone.Volume.Lvl)) {
						return false;
					}
					if (this == object) {
						return true;
					}
					final YAMAHAAV.MainZone.Volume.Lvl that = ((YAMAHAAV.MainZone.Volume.Lvl) object);
					{
						int lhsVal;
						lhsVal = (true ? this.getVal() : 0);
						int rhsVal;
						rhsVal = (true ? that.getVal() : 0);
						if (!strategy.equals(LocatorUtils.property(thisLocator, "val", lhsVal),
								LocatorUtils.property(thatLocator, "val", rhsVal), lhsVal, rhsVal)) {
							return false;
						}
					}
					{
						byte lhsExp;
						lhsExp = (true ? this.getExp() : 0);
						byte rhsExp;
						rhsExp = (true ? that.getExp() : 0);
						if (!strategy.equals(LocatorUtils.property(thisLocator, "exp", lhsExp),
								LocatorUtils.property(thatLocator, "exp", rhsExp), lhsExp, rhsExp)) {
							return false;
						}
					}
					{
						String lhsUnit;
						lhsUnit = this.getUnit();
						String rhsUnit;
						rhsUnit = that.getUnit();
						if (!strategy.equals(LocatorUtils.property(thisLocator, "unit", lhsUnit),
								LocatorUtils.property(thatLocator, "unit", rhsUnit), lhsUnit, rhsUnit)) {
							return false;
						}
					}
					return true;
				}

				public boolean equals(Object object) {
					final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
					return equals(null, null, object, strategy);
				}

				public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
					int currentHashCode = 1;
					{
						int theVal;
						theVal = (true ? this.getVal() : 0);
						currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "val", theVal),
								currentHashCode, theVal);
					}
					{
						byte theExp;
						theExp = (true ? this.getExp() : 0);
						currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "exp", theExp),
								currentHashCode, theExp);
					}
					{
						String theUnit;
						theUnit = this.getUnit();
						currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "unit", theUnit),
								currentHashCode, theUnit);
					}
					return currentHashCode;
				}

				public int hashCode() {
					final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
					return this.hashCode(null, strategy);
				}

				public Object clone() {
					return copyTo(createNewInstance());
				}

				public Object copyTo(Object target) {
					final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
					return copyTo(null, target, strategy);
				}

				public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
					final Object draftCopy = ((target == null) ? createNewInstance() : target);
					if (draftCopy instanceof YAMAHAAV.MainZone.Volume.Lvl) {
						final YAMAHAAV.MainZone.Volume.Lvl copy = ((YAMAHAAV.MainZone.Volume.Lvl) draftCopy);
						int sourceVal;
						sourceVal = (true ? this.getVal() : 0);
						int copyVal = strategy.copy(LocatorUtils.property(locator, "val", sourceVal), sourceVal);
						copy.setVal(copyVal);
						byte sourceExp;
						sourceExp = (true ? this.getExp() : 0);
						byte copyExp = strategy.copy(LocatorUtils.property(locator, "exp", sourceExp), sourceExp);
						copy.setExp(copyExp);
						if (this.unit != null) {
							String sourceUnit;
							sourceUnit = this.getUnit();
							String copyUnit = ((String) strategy
									.copy(LocatorUtils.property(locator, "unit", sourceUnit), sourceUnit));
							copy.setUnit(copyUnit);
						} else {
							copy.unit = null;
						}
					}
					return draftCopy;
				}

				public Object createNewInstance() {
					return new YAMAHAAV.MainZone.Volume.Lvl();
				}

			}

		}

	}

}
