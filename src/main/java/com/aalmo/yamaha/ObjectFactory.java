//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.09.25 at 12:45:13 PM CEST 
//

package com.aalmo.yamaha;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlRegistry;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.RequestEntity;
import org.apache.commons.httpclient.methods.StringRequestEntity;
import org.apache.log4j.Logger;

import com.aalmo.yamaha.model.YAMAHAAV;
import com.aalmo.yamaha.model.YAMAHACMD;
import com.aalmo.yamaha.model.YAMAHAAV.MainZone;
import com.aalmo.yamaha.util.ReadConfiguration;

/**
 * This object contains factory methods for each Java content interface and Java
 * element interface generated in the com.almoayed.yamaha.rxv.model package.
 * <p>
 * An ObjectFactory allows you to programatically construct new instances of the
 * Java representation for XML content. The Java representation of XML content
 * can consist of schema derived interfaces and classes representing the binding
 * of schema type definitions, element declarations and model groups. Factory
 * methods for each of these are provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {
	private YAMAHAAV currentRXVStatus = null;
	final static Logger logger = Logger.getLogger(ObjectFactory.class);

	/**
	 * Create a new ObjectFactory that can be used to create new instances of
	 * schema derived classes for package: com.almoayed.yamaha.rxv.model
	 * 
	 */
	public ObjectFactory() {

	}

	/**
	 * Create an instance of {@link YAMAHAAV }
	 * 
	 */
	private YAMAHAAV createYAMAHAAV() {
		return new YAMAHAAV();
	}

	/**
	 * Create an instance of {@link YAMAHAAV.MainZone }
	 * 
	 */
	private YAMAHAAV.MainZone createYAMAHAAVMainZone() {
		return new YAMAHAAV.MainZone();
	}

	/**
	 * Create an instance of {@link YAMAHAAV.MainZone.SoundVideo }
	 * 
	 */
	public YAMAHAAV.MainZone.SoundVideo createYAMAHAAVMainZoneSoundVideo() {
		return new YAMAHAAV.MainZone.SoundVideo();
	}

	/**
	 * Create an instance of {@link YAMAHAAV.MainZone.SoundVideo.HDMI }
	 * 
	 */
	public YAMAHAAV.MainZone.SoundVideo.HDMI createYAMAHAAVMainZoneSoundVideoHDMI() {
		return new YAMAHAAV.MainZone.SoundVideo.HDMI();
	}

	/**
	 * Create an instance of {@link YAMAHAAV.MainZone.SoundVideo.Tone }
	 * 
	 */
	public YAMAHAAV.MainZone.SoundVideo.Tone createYAMAHAAVMainZoneSoundVideoTone() {
		return new YAMAHAAV.MainZone.SoundVideo.Tone();
	}

	/**
	 * Create an instance of {@link YAMAHAAV.MainZone.Surround }
	 * 
	 */
	public YAMAHAAV.MainZone.Surround createYAMAHAAVMainZoneSurround() {
		return new YAMAHAAV.MainZone.Surround();
	}

	/**
	 * Create an instance of {@link YAMAHAAV.MainZone.Surround.ProgramSel }
	 * 
	 */
	public YAMAHAAV.MainZone.Surround.ProgramSel createYAMAHAAVMainZoneSurroundProgramSel() {
		return new YAMAHAAV.MainZone.Surround.ProgramSel();
	}

	/**
	 * Create an instance of {@link YAMAHAAV.MainZone.Input }
	 * 
	 */
	public YAMAHAAV.MainZone.Input createYAMAHAAVMainZoneInput() {
		return new YAMAHAAV.MainZone.Input();
	}

	/**
	 * Create an instance of {@link YAMAHAAV.MainZone.Input.InputSelItemInfo }
	 * 
	 */
	public YAMAHAAV.MainZone.Input.InputSelItemInfo createYAMAHAAVMainZoneInputInputSelItemInfo() {
		return new YAMAHAAV.MainZone.Input.InputSelItemInfo();
	}

	/**
	 * Create an instance of {@link YAMAHAAV.MainZone.Volume }
	 * 
	 */
	public YAMAHAAV.MainZone.Volume createYAMAHAAVMainZoneVolume() {
		return new YAMAHAAV.MainZone.Volume();
	}

	/**
	 * Create an instance of {@link YAMAHAAV.MainZone.PowerControl }
	 * 
	 */
	public YAMAHAAV.MainZone.PowerControl createYAMAHAAVMainZonePowerControl() {

		return new YAMAHAAV.MainZone.PowerControl();
	}

	/**
	 * Create an instance of {@link YAMAHAAV.MainZone.SoundVideo.Direct }
	 * 
	 */
	public YAMAHAAV.MainZone.SoundVideo.Direct createYAMAHAAVMainZoneSoundVideoDirect() {
		return new YAMAHAAV.MainZone.SoundVideo.Direct();
	}

	/**
	 * Create an instance of {@link YAMAHAAV.MainZone.SoundVideo.HDMI.Output }
	 * 
	 */
	public YAMAHAAV.MainZone.SoundVideo.HDMI.Output createYAMAHAAVMainZoneSoundVideoHDMIOutput() {
		return new YAMAHAAV.MainZone.SoundVideo.HDMI.Output();
	}

	/**
	 * Create an instance of {@link YAMAHAAV.MainZone.SoundVideo.Tone.Bass }
	 * 
	 */
	public YAMAHAAV.MainZone.SoundVideo.Tone.Bass createYAMAHAAVMainZoneSoundVideoToneBass() {
		return new YAMAHAAV.MainZone.SoundVideo.Tone.Bass();
	}

	/**
	 * Create an instance of {@link YAMAHAAV.MainZone.SoundVideo.Tone.Treble }
	 * 
	 */
	public YAMAHAAV.MainZone.SoundVideo.Tone.Treble createYAMAHAAVMainZoneSoundVideoToneTreble() {
		return new YAMAHAAV.MainZone.SoundVideo.Tone.Treble();
	}

	/**
	 * Create an instance of
	 * {@link YAMAHAAV.MainZone.Surround.ProgramSel.Current }
	 * 
	 */
	public YAMAHAAV.MainZone.Surround.ProgramSel.Current createYAMAHAAVMainZoneSurroundProgramSelCurrent() {
		return new YAMAHAAV.MainZone.Surround.ProgramSel.Current();
	}

	/**
	 * Create an instance of
	 * {@link YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon }
	 * 
	 */
	public YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon createYAMAHAAVMainZoneInputInputSelItemInfoIcon() {
		return new YAMAHAAV.MainZone.Input.InputSelItemInfo.Icon();
	}

	/**
	 * Create an instance of {@link YAMAHAAV.MainZone.Volume.Lvl }
	 * 
	 */
	public YAMAHAAV.MainZone.Volume.Lvl createYAMAHAAVMainZoneVolumeLvl() {
		return new YAMAHAAV.MainZone.Volume.Lvl();
	}

	/**
	 * Create an instance of {@link YAMAHAAV.BasicStatus }
	 * 
	 */
	private YAMAHAAV CreateBasicStatusXML() {
		YAMAHAAV yamahaav = createYAMAHAAV();
		yamahaav.setCmd(YAMAHACMD.XMLMeta.GET);
		MainZone mainZone = createYAMAHAAVMainZone();
		mainZone.setBasicStatus(YAMAHACMD.XMLMeta.GETPARAM);
		yamahaav.setMainZone(mainZone);
		return yamahaav;
	}

	/**
	 * Create an instance of the XML header
	 * <YAMAHA_AV cmd="PUT"/><Main_Zone/> which is needed for the status change.
	 * Other elements must be added programmatically
	 * 
	 * @return a {@link YAMAHAAV } object with an extra level
	 *         {@link YAMAHAAV.MainZone }
	 */
	public YAMAHAAV createRoot() {
		YAMAHAAV yamahaav = createYAMAHAAV();
		yamahaav.setCmd(YAMAHACMD.XMLMeta.PUT);
		yamahaav.setMainZone(createYAMAHAAVMainZone());
		return yamahaav;
	}

	/**
	 * Post the new changes as XML to the RXV receiver
	 * 
	 * @param xmlBody
	 *            the new unmarshaled {@link YAMAHAAV } Object
	 * @return Response from RXV receiver
	 */
	private String postRXV(String xmlBody) {
		PostMethod post = new PostMethod(getRXVURL());
		String response = null;
		try {

			RequestEntity entity = new StringRequestEntity(xmlBody, "text/xml", "UTF-8");
			post.setRequestEntity(entity);
			post.setRequestHeader("SOAPAction", "POST");
			// Get HTTP client
			HttpClient httpclient = new HttpClient();
			httpclient.executeMethod(post);
			response = post.getResponseBodyAsString();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (HttpException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			// Release current connection to the connection pool once you are
			// done
			post.releaseConnection();
		}
		return response;
	}

	/**
	 * Submit changes to different RXV receiver nodes. This will can be best
	 * used if the {@link #getRecieverStatus()} was called and made changes into
	 * 
	 * @param rootObject
	 *            the new changes made to the returned object from
	 *            {@link #getRecieverStatus()}
	 * @return Response from RXV receiver
	 */
	public String updateRecieverProperty(Object rootObject) {

		return postRXV(rootObject.toString());
	}

	/**
	 * Submit changes to a specific RXV receiver element like sound or power.
	 * The YAMAHAAV object must have the <YAMAHA_AV cmd="PUT"/><Main_Zone/> root
	 * elements.
	 * 
	 * @param yamahaav
	 *            the new changes made to one of the following elements This
	 *            method is only used when making SINGLE change to
	 *            {@link ObjectFactory#createYAMAHAAVMainZonePowerControl()},
	 *            {@link ObjectFactory#createYAMAHAAVMainZoneVolume()},
	 *            {@link ObjectFactory#createYAMAHAAVMainZoneInput()},
	 *            {@link ObjectFactory#createYAMAHAAVMainZoneSurround()},
	 *            {@link ObjectFactory#createYAMAHAAVMainZoneSoundVideo()} and
	 *            {@link ObjectFactory#createYAMAHAAVMainZoneSoundVideo()}
	 * @return Response from RXV receiver
	 */
	public String updateReciever(YAMAHAAV yamahaav) {
		StringBuffer buffer = new StringBuffer();
		List<String> list = getChangedElements(yamahaav);
		for (String string : list) {
			buffer.append(postRXV(string) + "\n");
			try {
				TimeUnit.SECONDS.sleep(1);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		return buffer.toString();
	}

	/**
	 * Get the right URL of the RXV receiver. The method reads the configuration
	 * from {@link yamaha.properties}
	 * 
	 * @return the right URL to RXV receiver
	 */
	private String getRXVURL() {
		String rxvURL = "";
		String head = ReadConfiguration.getInstance().getProperty("YAMAHA_SSL").toLowerCase().equals("true")
				? "https://" : "http://";
		String port = ReadConfiguration.getInstance().getProperty("YAMAHA_PORT");
		port = port.equals("80") || port == null || port.equals("") ? "" : ":" + port;
		rxvURL = head + ReadConfiguration.getInstance().getProperty("YAMAHA_IP") + port + "/YamahaRemoteControl/ctrl";
		logger.debug("YAMAHA URL: " + rxvURL);
		return rxvURL;
	}

	/**
	 * When calling {@link #updateAllReciever(Object)} method, only new updates
	 * to the {@link YAMAHAAV} object must be saved to an execution list.
	 * 
	 * @param newRXVStatus
	 *            the new changed {@link YAMAHAAV} object
	 * @return List of execution plan to the RXV receiver
	 */
	private List<String> getChangedElements(YAMAHAAV newRXVStatus) {
		List<String> list = new ArrayList<String>();
		if ((!(newRXVStatus.getMainZone().getPowerControl()
				.equals(this.currentRXVStatus.getMainZone().getPowerControl())))
				&& newRXVStatus.getMainZone().getPowerControl().getPower().equals(YAMAHACMD.POWER.ON)) {
			list.add(newRXVStatus.getMainZone().getPowerControl().toString());
		}
		if (!newRXVStatus.getMainZone().getInput().equals(this.currentRXVStatus.getMainZone().getInput())) {
			list.add(newRXVStatus.getMainZone().getInput().toString());
		}
		if (!newRXVStatus.getMainZone().getSoundVideo().equals(this.currentRXVStatus.getMainZone().getSoundVideo())) {
			list.add(newRXVStatus.getMainZone().getSoundVideo().toString());
		}
		if (!newRXVStatus.getMainZone().getSurround().equals(this.currentRXVStatus.getMainZone().getSurround())) {
			list.add(newRXVStatus.getMainZone().getSurround().toString());
		}
		if (!newRXVStatus.getMainZone().getVolume().equals(this.currentRXVStatus.getMainZone().getVolume())) {
			list.add(newRXVStatus.getMainZone().getVolume().toString());
		}
		if (!newRXVStatus.getMainZone().getPowerControl().equals(this.currentRXVStatus.getMainZone().getPowerControl())
				&& (newRXVStatus.getMainZone().getPowerControl().getPower().equals(YAMAHACMD.POWER.STADBY)
						|| newRXVStatus.getMainZone().getPowerControl().getPower().equals(YAMAHACMD.POWER.OFF))) {
			list.add(newRXVStatus.getMainZone().getPowerControl().toString());
		}
		return list;
	}

	/**
	 * Marshelling object to an XML format.
	 * 
	 * @param object
	 *            the {@link YAMAHAAV} object
	 * @return the XML formate of this object
	 */
	private String marshallObject(Object object) {
		StringWriter sw = new StringWriter();
		JAXBContext jc;
		try {
			jc = JAXBContext.newInstance(YAMAHAAV.class);
			Marshaller marshaller = jc.createMarshaller();
			marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
			marshaller.marshal(object, sw);
		} catch (JAXBException e) {
			e.printStackTrace();
		}
		return sw.toString();
	}

	/**
	 * Get the status of the RXV receiver
	 * 
	 * @return the status of the RXV status as {@link YAMAHAAV} object
	 */
	public YAMAHAAV getRecieverStatus() {
		YAMAHAAV yamahaav = null;
		JAXBContext jc;
		try {
			String yamXml = "";
			jc = JAXBContext.newInstance(YAMAHAAV.class);
			Unmarshaller unmarshaller = jc.createUnmarshaller();
			yamXml = postRXV(marshallObject(CreateBasicStatusXML())).replace("<Basic_Status>", "")
					.replace("</Basic_Status>", "");
			StringReader reader = new StringReader(yamXml);
			yamahaav = (YAMAHAAV) unmarshaller.unmarshal(reader);
			yamahaav.setCmd(YAMAHACMD.XMLMeta.PUT);
		} catch (JAXBException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (this.currentRXVStatus == null) {
			this.currentRXVStatus = (YAMAHAAV) yamahaav.clone();
		}
		logger.debug(yamahaav.toString());
		return yamahaav;
	}
}
